
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Tenant
 * 
 */
export type Tenant = $Result.DefaultSelection<Prisma.$TenantPayload>
/**
 * Model Capsule
 * 
 */
export type Capsule = $Result.DefaultSelection<Prisma.$CapsulePayload>
/**
 * Model PremiumQuote
 * 
 */
export type PremiumQuote = $Result.DefaultSelection<Prisma.$PremiumQuotePayload>
/**
 * Model UsageEvent
 * 
 */
export type UsageEvent = $Result.DefaultSelection<Prisma.$UsageEventPayload>
/**
 * Model TenantInvoice
 * 
 */
export type TenantInvoice = $Result.DefaultSelection<Prisma.$TenantInvoicePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Tenants
 * const tenants = await prisma.tenant.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Tenants
   * const tenants = await prisma.tenant.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.tenant`: Exposes CRUD operations for the **Tenant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tenants
    * const tenants = await prisma.tenant.findMany()
    * ```
    */
  get tenant(): Prisma.TenantDelegate<ExtArgs>;

  /**
   * `prisma.capsule`: Exposes CRUD operations for the **Capsule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Capsules
    * const capsules = await prisma.capsule.findMany()
    * ```
    */
  get capsule(): Prisma.CapsuleDelegate<ExtArgs>;

  /**
   * `prisma.premiumQuote`: Exposes CRUD operations for the **PremiumQuote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PremiumQuotes
    * const premiumQuotes = await prisma.premiumQuote.findMany()
    * ```
    */
  get premiumQuote(): Prisma.PremiumQuoteDelegate<ExtArgs>;

  /**
   * `prisma.usageEvent`: Exposes CRUD operations for the **UsageEvent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UsageEvents
    * const usageEvents = await prisma.usageEvent.findMany()
    * ```
    */
  get usageEvent(): Prisma.UsageEventDelegate<ExtArgs>;

  /**
   * `prisma.tenantInvoice`: Exposes CRUD operations for the **TenantInvoice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TenantInvoices
    * const tenantInvoices = await prisma.tenantInvoice.findMany()
    * ```
    */
  get tenantInvoice(): Prisma.TenantInvoiceDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Tenant: 'Tenant',
    Capsule: 'Capsule',
    PremiumQuote: 'PremiumQuote',
    UsageEvent: 'UsageEvent',
    TenantInvoice: 'TenantInvoice'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "tenant" | "capsule" | "premiumQuote" | "usageEvent" | "tenantInvoice"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Tenant: {
        payload: Prisma.$TenantPayload<ExtArgs>
        fields: Prisma.TenantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TenantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TenantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          findFirst: {
            args: Prisma.TenantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TenantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          findMany: {
            args: Prisma.TenantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>[]
          }
          create: {
            args: Prisma.TenantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          createMany: {
            args: Prisma.TenantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TenantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>[]
          }
          delete: {
            args: Prisma.TenantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          update: {
            args: Prisma.TenantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          deleteMany: {
            args: Prisma.TenantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TenantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TenantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          aggregate: {
            args: Prisma.TenantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTenant>
          }
          groupBy: {
            args: Prisma.TenantGroupByArgs<ExtArgs>
            result: $Utils.Optional<TenantGroupByOutputType>[]
          }
          count: {
            args: Prisma.TenantCountArgs<ExtArgs>
            result: $Utils.Optional<TenantCountAggregateOutputType> | number
          }
        }
      }
      Capsule: {
        payload: Prisma.$CapsulePayload<ExtArgs>
        fields: Prisma.CapsuleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CapsuleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapsulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CapsuleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapsulePayload>
          }
          findFirst: {
            args: Prisma.CapsuleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapsulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CapsuleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapsulePayload>
          }
          findMany: {
            args: Prisma.CapsuleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapsulePayload>[]
          }
          create: {
            args: Prisma.CapsuleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapsulePayload>
          }
          createMany: {
            args: Prisma.CapsuleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CapsuleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapsulePayload>[]
          }
          delete: {
            args: Prisma.CapsuleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapsulePayload>
          }
          update: {
            args: Prisma.CapsuleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapsulePayload>
          }
          deleteMany: {
            args: Prisma.CapsuleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CapsuleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CapsuleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CapsulePayload>
          }
          aggregate: {
            args: Prisma.CapsuleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCapsule>
          }
          groupBy: {
            args: Prisma.CapsuleGroupByArgs<ExtArgs>
            result: $Utils.Optional<CapsuleGroupByOutputType>[]
          }
          count: {
            args: Prisma.CapsuleCountArgs<ExtArgs>
            result: $Utils.Optional<CapsuleCountAggregateOutputType> | number
          }
        }
      }
      PremiumQuote: {
        payload: Prisma.$PremiumQuotePayload<ExtArgs>
        fields: Prisma.PremiumQuoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PremiumQuoteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumQuotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PremiumQuoteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumQuotePayload>
          }
          findFirst: {
            args: Prisma.PremiumQuoteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumQuotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PremiumQuoteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumQuotePayload>
          }
          findMany: {
            args: Prisma.PremiumQuoteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumQuotePayload>[]
          }
          create: {
            args: Prisma.PremiumQuoteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumQuotePayload>
          }
          createMany: {
            args: Prisma.PremiumQuoteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PremiumQuoteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumQuotePayload>[]
          }
          delete: {
            args: Prisma.PremiumQuoteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumQuotePayload>
          }
          update: {
            args: Prisma.PremiumQuoteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumQuotePayload>
          }
          deleteMany: {
            args: Prisma.PremiumQuoteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PremiumQuoteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PremiumQuoteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumQuotePayload>
          }
          aggregate: {
            args: Prisma.PremiumQuoteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePremiumQuote>
          }
          groupBy: {
            args: Prisma.PremiumQuoteGroupByArgs<ExtArgs>
            result: $Utils.Optional<PremiumQuoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.PremiumQuoteCountArgs<ExtArgs>
            result: $Utils.Optional<PremiumQuoteCountAggregateOutputType> | number
          }
        }
      }
      UsageEvent: {
        payload: Prisma.$UsageEventPayload<ExtArgs>
        fields: Prisma.UsageEventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsageEventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageEventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsageEventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageEventPayload>
          }
          findFirst: {
            args: Prisma.UsageEventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageEventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsageEventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageEventPayload>
          }
          findMany: {
            args: Prisma.UsageEventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageEventPayload>[]
          }
          create: {
            args: Prisma.UsageEventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageEventPayload>
          }
          createMany: {
            args: Prisma.UsageEventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsageEventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageEventPayload>[]
          }
          delete: {
            args: Prisma.UsageEventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageEventPayload>
          }
          update: {
            args: Prisma.UsageEventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageEventPayload>
          }
          deleteMany: {
            args: Prisma.UsageEventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsageEventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UsageEventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageEventPayload>
          }
          aggregate: {
            args: Prisma.UsageEventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsageEvent>
          }
          groupBy: {
            args: Prisma.UsageEventGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsageEventGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsageEventCountArgs<ExtArgs>
            result: $Utils.Optional<UsageEventCountAggregateOutputType> | number
          }
        }
      }
      TenantInvoice: {
        payload: Prisma.$TenantInvoicePayload<ExtArgs>
        fields: Prisma.TenantInvoiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TenantInvoiceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantInvoicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TenantInvoiceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantInvoicePayload>
          }
          findFirst: {
            args: Prisma.TenantInvoiceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantInvoicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TenantInvoiceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantInvoicePayload>
          }
          findMany: {
            args: Prisma.TenantInvoiceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantInvoicePayload>[]
          }
          create: {
            args: Prisma.TenantInvoiceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantInvoicePayload>
          }
          createMany: {
            args: Prisma.TenantInvoiceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TenantInvoiceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantInvoicePayload>[]
          }
          delete: {
            args: Prisma.TenantInvoiceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantInvoicePayload>
          }
          update: {
            args: Prisma.TenantInvoiceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantInvoicePayload>
          }
          deleteMany: {
            args: Prisma.TenantInvoiceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TenantInvoiceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TenantInvoiceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantInvoicePayload>
          }
          aggregate: {
            args: Prisma.TenantInvoiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTenantInvoice>
          }
          groupBy: {
            args: Prisma.TenantInvoiceGroupByArgs<ExtArgs>
            result: $Utils.Optional<TenantInvoiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.TenantInvoiceCountArgs<ExtArgs>
            result: $Utils.Optional<TenantInvoiceCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type TenantCountOutputType
   */

  export type TenantCountOutputType = {
    capsules: number
    premiumQuotes: number
    usageEvents: number
    invoices: number
  }

  export type TenantCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    capsules?: boolean | TenantCountOutputTypeCountCapsulesArgs
    premiumQuotes?: boolean | TenantCountOutputTypeCountPremiumQuotesArgs
    usageEvents?: boolean | TenantCountOutputTypeCountUsageEventsArgs
    invoices?: boolean | TenantCountOutputTypeCountInvoicesArgs
  }

  // Custom InputTypes
  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantCountOutputType
     */
    select?: TenantCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountCapsulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CapsuleWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountPremiumQuotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PremiumQuoteWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountUsageEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsageEventWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountInvoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TenantInvoiceWhereInput
  }


  /**
   * Count Type CapsuleCountOutputType
   */

  export type CapsuleCountOutputType = {
    premiumQuotes: number
  }

  export type CapsuleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    premiumQuotes?: boolean | CapsuleCountOutputTypeCountPremiumQuotesArgs
  }

  // Custom InputTypes
  /**
   * CapsuleCountOutputType without action
   */
  export type CapsuleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CapsuleCountOutputType
     */
    select?: CapsuleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CapsuleCountOutputType without action
   */
  export type CapsuleCountOutputTypeCountPremiumQuotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PremiumQuoteWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Tenant
   */

  export type AggregateTenant = {
    _count: TenantCountAggregateOutputType | null
    _min: TenantMinAggregateOutputType | null
    _max: TenantMaxAggregateOutputType | null
  }

  export type TenantMinAggregateOutputType = {
    id: string | null
    name: string | null
    auth0Id: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TenantMaxAggregateOutputType = {
    id: string | null
    name: string | null
    auth0Id: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TenantCountAggregateOutputType = {
    id: number
    name: number
    auth0Id: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TenantMinAggregateInputType = {
    id?: true
    name?: true
    auth0Id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TenantMaxAggregateInputType = {
    id?: true
    name?: true
    auth0Id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TenantCountAggregateInputType = {
    id?: true
    name?: true
    auth0Id?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TenantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tenant to aggregate.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tenants
    **/
    _count?: true | TenantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TenantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TenantMaxAggregateInputType
  }

  export type GetTenantAggregateType<T extends TenantAggregateArgs> = {
        [P in keyof T & keyof AggregateTenant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTenant[P]>
      : GetScalarType<T[P], AggregateTenant[P]>
  }




  export type TenantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TenantWhereInput
    orderBy?: TenantOrderByWithAggregationInput | TenantOrderByWithAggregationInput[]
    by: TenantScalarFieldEnum[] | TenantScalarFieldEnum
    having?: TenantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TenantCountAggregateInputType | true
    _min?: TenantMinAggregateInputType
    _max?: TenantMaxAggregateInputType
  }

  export type TenantGroupByOutputType = {
    id: string
    name: string
    auth0Id: string
    createdAt: Date
    updatedAt: Date
    _count: TenantCountAggregateOutputType | null
    _min: TenantMinAggregateOutputType | null
    _max: TenantMaxAggregateOutputType | null
  }

  type GetTenantGroupByPayload<T extends TenantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TenantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TenantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TenantGroupByOutputType[P]>
            : GetScalarType<T[P], TenantGroupByOutputType[P]>
        }
      >
    >


  export type TenantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    auth0Id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    capsules?: boolean | Tenant$capsulesArgs<ExtArgs>
    premiumQuotes?: boolean | Tenant$premiumQuotesArgs<ExtArgs>
    usageEvents?: boolean | Tenant$usageEventsArgs<ExtArgs>
    invoices?: boolean | Tenant$invoicesArgs<ExtArgs>
    _count?: boolean | TenantCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tenant"]>

  export type TenantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    auth0Id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["tenant"]>

  export type TenantSelectScalar = {
    id?: boolean
    name?: boolean
    auth0Id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TenantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    capsules?: boolean | Tenant$capsulesArgs<ExtArgs>
    premiumQuotes?: boolean | Tenant$premiumQuotesArgs<ExtArgs>
    usageEvents?: boolean | Tenant$usageEventsArgs<ExtArgs>
    invoices?: boolean | Tenant$invoicesArgs<ExtArgs>
    _count?: boolean | TenantCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TenantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TenantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tenant"
    objects: {
      capsules: Prisma.$CapsulePayload<ExtArgs>[]
      premiumQuotes: Prisma.$PremiumQuotePayload<ExtArgs>[]
      usageEvents: Prisma.$UsageEventPayload<ExtArgs>[]
      invoices: Prisma.$TenantInvoicePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      auth0Id: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tenant"]>
    composites: {}
  }

  type TenantGetPayload<S extends boolean | null | undefined | TenantDefaultArgs> = $Result.GetResult<Prisma.$TenantPayload, S>

  type TenantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TenantFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TenantCountAggregateInputType | true
    }

  export interface TenantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tenant'], meta: { name: 'Tenant' } }
    /**
     * Find zero or one Tenant that matches the filter.
     * @param {TenantFindUniqueArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TenantFindUniqueArgs>(args: SelectSubset<T, TenantFindUniqueArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Tenant that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TenantFindUniqueOrThrowArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TenantFindUniqueOrThrowArgs>(args: SelectSubset<T, TenantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Tenant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantFindFirstArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TenantFindFirstArgs>(args?: SelectSubset<T, TenantFindFirstArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Tenant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantFindFirstOrThrowArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TenantFindFirstOrThrowArgs>(args?: SelectSubset<T, TenantFindFirstOrThrowArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tenants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tenants
     * const tenants = await prisma.tenant.findMany()
     * 
     * // Get first 10 Tenants
     * const tenants = await prisma.tenant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tenantWithIdOnly = await prisma.tenant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TenantFindManyArgs>(args?: SelectSubset<T, TenantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Tenant.
     * @param {TenantCreateArgs} args - Arguments to create a Tenant.
     * @example
     * // Create one Tenant
     * const Tenant = await prisma.tenant.create({
     *   data: {
     *     // ... data to create a Tenant
     *   }
     * })
     * 
     */
    create<T extends TenantCreateArgs>(args: SelectSubset<T, TenantCreateArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tenants.
     * @param {TenantCreateManyArgs} args - Arguments to create many Tenants.
     * @example
     * // Create many Tenants
     * const tenant = await prisma.tenant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TenantCreateManyArgs>(args?: SelectSubset<T, TenantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tenants and returns the data saved in the database.
     * @param {TenantCreateManyAndReturnArgs} args - Arguments to create many Tenants.
     * @example
     * // Create many Tenants
     * const tenant = await prisma.tenant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tenants and only return the `id`
     * const tenantWithIdOnly = await prisma.tenant.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TenantCreateManyAndReturnArgs>(args?: SelectSubset<T, TenantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Tenant.
     * @param {TenantDeleteArgs} args - Arguments to delete one Tenant.
     * @example
     * // Delete one Tenant
     * const Tenant = await prisma.tenant.delete({
     *   where: {
     *     // ... filter to delete one Tenant
     *   }
     * })
     * 
     */
    delete<T extends TenantDeleteArgs>(args: SelectSubset<T, TenantDeleteArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Tenant.
     * @param {TenantUpdateArgs} args - Arguments to update one Tenant.
     * @example
     * // Update one Tenant
     * const tenant = await prisma.tenant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TenantUpdateArgs>(args: SelectSubset<T, TenantUpdateArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tenants.
     * @param {TenantDeleteManyArgs} args - Arguments to filter Tenants to delete.
     * @example
     * // Delete a few Tenants
     * const { count } = await prisma.tenant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TenantDeleteManyArgs>(args?: SelectSubset<T, TenantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tenants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tenants
     * const tenant = await prisma.tenant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TenantUpdateManyArgs>(args: SelectSubset<T, TenantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tenant.
     * @param {TenantUpsertArgs} args - Arguments to update or create a Tenant.
     * @example
     * // Update or create a Tenant
     * const tenant = await prisma.tenant.upsert({
     *   create: {
     *     // ... data to create a Tenant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tenant we want to update
     *   }
     * })
     */
    upsert<T extends TenantUpsertArgs>(args: SelectSubset<T, TenantUpsertArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tenants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantCountArgs} args - Arguments to filter Tenants to count.
     * @example
     * // Count the number of Tenants
     * const count = await prisma.tenant.count({
     *   where: {
     *     // ... the filter for the Tenants we want to count
     *   }
     * })
    **/
    count<T extends TenantCountArgs>(
      args?: Subset<T, TenantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TenantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tenant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TenantAggregateArgs>(args: Subset<T, TenantAggregateArgs>): Prisma.PrismaPromise<GetTenantAggregateType<T>>

    /**
     * Group by Tenant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TenantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TenantGroupByArgs['orderBy'] }
        : { orderBy?: TenantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TenantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTenantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tenant model
   */
  readonly fields: TenantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tenant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TenantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    capsules<T extends Tenant$capsulesArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$capsulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CapsulePayload<ExtArgs>, T, "findMany"> | Null>
    premiumQuotes<T extends Tenant$premiumQuotesArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$premiumQuotesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PremiumQuotePayload<ExtArgs>, T, "findMany"> | Null>
    usageEvents<T extends Tenant$usageEventsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$usageEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsageEventPayload<ExtArgs>, T, "findMany"> | Null>
    invoices<T extends Tenant$invoicesArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$invoicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantInvoicePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tenant model
   */ 
  interface TenantFieldRefs {
    readonly id: FieldRef<"Tenant", 'String'>
    readonly name: FieldRef<"Tenant", 'String'>
    readonly auth0Id: FieldRef<"Tenant", 'String'>
    readonly createdAt: FieldRef<"Tenant", 'DateTime'>
    readonly updatedAt: FieldRef<"Tenant", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Tenant findUnique
   */
  export type TenantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant findUniqueOrThrow
   */
  export type TenantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant findFirst
   */
  export type TenantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tenants.
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tenants.
     */
    distinct?: TenantScalarFieldEnum | TenantScalarFieldEnum[]
  }

  /**
   * Tenant findFirstOrThrow
   */
  export type TenantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tenants.
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tenants.
     */
    distinct?: TenantScalarFieldEnum | TenantScalarFieldEnum[]
  }

  /**
   * Tenant findMany
   */
  export type TenantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenants to fetch.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tenants.
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    distinct?: TenantScalarFieldEnum | TenantScalarFieldEnum[]
  }

  /**
   * Tenant create
   */
  export type TenantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * The data needed to create a Tenant.
     */
    data: XOR<TenantCreateInput, TenantUncheckedCreateInput>
  }

  /**
   * Tenant createMany
   */
  export type TenantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tenants.
     */
    data: TenantCreateManyInput | TenantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tenant createManyAndReturn
   */
  export type TenantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Tenants.
     */
    data: TenantCreateManyInput | TenantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tenant update
   */
  export type TenantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * The data needed to update a Tenant.
     */
    data: XOR<TenantUpdateInput, TenantUncheckedUpdateInput>
    /**
     * Choose, which Tenant to update.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant updateMany
   */
  export type TenantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tenants.
     */
    data: XOR<TenantUpdateManyMutationInput, TenantUncheckedUpdateManyInput>
    /**
     * Filter which Tenants to update
     */
    where?: TenantWhereInput
  }

  /**
   * Tenant upsert
   */
  export type TenantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * The filter to search for the Tenant to update in case it exists.
     */
    where: TenantWhereUniqueInput
    /**
     * In case the Tenant found by the `where` argument doesn't exist, create a new Tenant with this data.
     */
    create: XOR<TenantCreateInput, TenantUncheckedCreateInput>
    /**
     * In case the Tenant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TenantUpdateInput, TenantUncheckedUpdateInput>
  }

  /**
   * Tenant delete
   */
  export type TenantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter which Tenant to delete.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant deleteMany
   */
  export type TenantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tenants to delete
     */
    where?: TenantWhereInput
  }

  /**
   * Tenant.capsules
   */
  export type Tenant$capsulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capsule
     */
    select?: CapsuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapsuleInclude<ExtArgs> | null
    where?: CapsuleWhereInput
    orderBy?: CapsuleOrderByWithRelationInput | CapsuleOrderByWithRelationInput[]
    cursor?: CapsuleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CapsuleScalarFieldEnum | CapsuleScalarFieldEnum[]
  }

  /**
   * Tenant.premiumQuotes
   */
  export type Tenant$premiumQuotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumQuote
     */
    select?: PremiumQuoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumQuoteInclude<ExtArgs> | null
    where?: PremiumQuoteWhereInput
    orderBy?: PremiumQuoteOrderByWithRelationInput | PremiumQuoteOrderByWithRelationInput[]
    cursor?: PremiumQuoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PremiumQuoteScalarFieldEnum | PremiumQuoteScalarFieldEnum[]
  }

  /**
   * Tenant.usageEvents
   */
  export type Tenant$usageEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageEvent
     */
    select?: UsageEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageEventInclude<ExtArgs> | null
    where?: UsageEventWhereInput
    orderBy?: UsageEventOrderByWithRelationInput | UsageEventOrderByWithRelationInput[]
    cursor?: UsageEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsageEventScalarFieldEnum | UsageEventScalarFieldEnum[]
  }

  /**
   * Tenant.invoices
   */
  export type Tenant$invoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantInvoice
     */
    select?: TenantInvoiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInvoiceInclude<ExtArgs> | null
    where?: TenantInvoiceWhereInput
    orderBy?: TenantInvoiceOrderByWithRelationInput | TenantInvoiceOrderByWithRelationInput[]
    cursor?: TenantInvoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TenantInvoiceScalarFieldEnum | TenantInvoiceScalarFieldEnum[]
  }

  /**
   * Tenant without action
   */
  export type TenantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
  }


  /**
   * Model Capsule
   */

  export type AggregateCapsule = {
    _count: CapsuleCountAggregateOutputType | null
    _avg: CapsuleAvgAggregateOutputType | null
    _sum: CapsuleSumAggregateOutputType | null
    _min: CapsuleMinAggregateOutputType | null
    _max: CapsuleMaxAggregateOutputType | null
  }

  export type CapsuleAvgAggregateOutputType = {
    riskScore: number | null
  }

  export type CapsuleSumAggregateOutputType = {
    riskScore: number | null
  }

  export type CapsuleMinAggregateOutputType = {
    id: string | null
    hash: string | null
    specSig: string | null
    riskScore: number | null
    reason: string | null
    tenantId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CapsuleMaxAggregateOutputType = {
    id: string | null
    hash: string | null
    specSig: string | null
    riskScore: number | null
    reason: string | null
    tenantId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CapsuleCountAggregateOutputType = {
    id: number
    hash: number
    specSig: number
    riskScore: number
    reason: number
    tenantId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CapsuleAvgAggregateInputType = {
    riskScore?: true
  }

  export type CapsuleSumAggregateInputType = {
    riskScore?: true
  }

  export type CapsuleMinAggregateInputType = {
    id?: true
    hash?: true
    specSig?: true
    riskScore?: true
    reason?: true
    tenantId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CapsuleMaxAggregateInputType = {
    id?: true
    hash?: true
    specSig?: true
    riskScore?: true
    reason?: true
    tenantId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CapsuleCountAggregateInputType = {
    id?: true
    hash?: true
    specSig?: true
    riskScore?: true
    reason?: true
    tenantId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CapsuleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Capsule to aggregate.
     */
    where?: CapsuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Capsules to fetch.
     */
    orderBy?: CapsuleOrderByWithRelationInput | CapsuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CapsuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Capsules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Capsules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Capsules
    **/
    _count?: true | CapsuleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CapsuleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CapsuleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CapsuleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CapsuleMaxAggregateInputType
  }

  export type GetCapsuleAggregateType<T extends CapsuleAggregateArgs> = {
        [P in keyof T & keyof AggregateCapsule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCapsule[P]>
      : GetScalarType<T[P], AggregateCapsule[P]>
  }




  export type CapsuleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CapsuleWhereInput
    orderBy?: CapsuleOrderByWithAggregationInput | CapsuleOrderByWithAggregationInput[]
    by: CapsuleScalarFieldEnum[] | CapsuleScalarFieldEnum
    having?: CapsuleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CapsuleCountAggregateInputType | true
    _avg?: CapsuleAvgAggregateInputType
    _sum?: CapsuleSumAggregateInputType
    _min?: CapsuleMinAggregateInputType
    _max?: CapsuleMaxAggregateInputType
  }

  export type CapsuleGroupByOutputType = {
    id: string
    hash: string
    specSig: string
    riskScore: number
    reason: string | null
    tenantId: string
    createdAt: Date
    updatedAt: Date
    _count: CapsuleCountAggregateOutputType | null
    _avg: CapsuleAvgAggregateOutputType | null
    _sum: CapsuleSumAggregateOutputType | null
    _min: CapsuleMinAggregateOutputType | null
    _max: CapsuleMaxAggregateOutputType | null
  }

  type GetCapsuleGroupByPayload<T extends CapsuleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CapsuleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CapsuleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CapsuleGroupByOutputType[P]>
            : GetScalarType<T[P], CapsuleGroupByOutputType[P]>
        }
      >
    >


  export type CapsuleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hash?: boolean
    specSig?: boolean
    riskScore?: boolean
    reason?: boolean
    tenantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    premiumQuotes?: boolean | Capsule$premiumQuotesArgs<ExtArgs>
    _count?: boolean | CapsuleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["capsule"]>

  export type CapsuleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hash?: boolean
    specSig?: boolean
    riskScore?: boolean
    reason?: boolean
    tenantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["capsule"]>

  export type CapsuleSelectScalar = {
    id?: boolean
    hash?: boolean
    specSig?: boolean
    riskScore?: boolean
    reason?: boolean
    tenantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CapsuleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    premiumQuotes?: boolean | Capsule$premiumQuotesArgs<ExtArgs>
    _count?: boolean | CapsuleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CapsuleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $CapsulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Capsule"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
      premiumQuotes: Prisma.$PremiumQuotePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      hash: string
      specSig: string
      riskScore: number
      reason: string | null
      tenantId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["capsule"]>
    composites: {}
  }

  type CapsuleGetPayload<S extends boolean | null | undefined | CapsuleDefaultArgs> = $Result.GetResult<Prisma.$CapsulePayload, S>

  type CapsuleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CapsuleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CapsuleCountAggregateInputType | true
    }

  export interface CapsuleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Capsule'], meta: { name: 'Capsule' } }
    /**
     * Find zero or one Capsule that matches the filter.
     * @param {CapsuleFindUniqueArgs} args - Arguments to find a Capsule
     * @example
     * // Get one Capsule
     * const capsule = await prisma.capsule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CapsuleFindUniqueArgs>(args: SelectSubset<T, CapsuleFindUniqueArgs<ExtArgs>>): Prisma__CapsuleClient<$Result.GetResult<Prisma.$CapsulePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Capsule that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CapsuleFindUniqueOrThrowArgs} args - Arguments to find a Capsule
     * @example
     * // Get one Capsule
     * const capsule = await prisma.capsule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CapsuleFindUniqueOrThrowArgs>(args: SelectSubset<T, CapsuleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CapsuleClient<$Result.GetResult<Prisma.$CapsulePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Capsule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CapsuleFindFirstArgs} args - Arguments to find a Capsule
     * @example
     * // Get one Capsule
     * const capsule = await prisma.capsule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CapsuleFindFirstArgs>(args?: SelectSubset<T, CapsuleFindFirstArgs<ExtArgs>>): Prisma__CapsuleClient<$Result.GetResult<Prisma.$CapsulePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Capsule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CapsuleFindFirstOrThrowArgs} args - Arguments to find a Capsule
     * @example
     * // Get one Capsule
     * const capsule = await prisma.capsule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CapsuleFindFirstOrThrowArgs>(args?: SelectSubset<T, CapsuleFindFirstOrThrowArgs<ExtArgs>>): Prisma__CapsuleClient<$Result.GetResult<Prisma.$CapsulePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Capsules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CapsuleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Capsules
     * const capsules = await prisma.capsule.findMany()
     * 
     * // Get first 10 Capsules
     * const capsules = await prisma.capsule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const capsuleWithIdOnly = await prisma.capsule.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CapsuleFindManyArgs>(args?: SelectSubset<T, CapsuleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CapsulePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Capsule.
     * @param {CapsuleCreateArgs} args - Arguments to create a Capsule.
     * @example
     * // Create one Capsule
     * const Capsule = await prisma.capsule.create({
     *   data: {
     *     // ... data to create a Capsule
     *   }
     * })
     * 
     */
    create<T extends CapsuleCreateArgs>(args: SelectSubset<T, CapsuleCreateArgs<ExtArgs>>): Prisma__CapsuleClient<$Result.GetResult<Prisma.$CapsulePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Capsules.
     * @param {CapsuleCreateManyArgs} args - Arguments to create many Capsules.
     * @example
     * // Create many Capsules
     * const capsule = await prisma.capsule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CapsuleCreateManyArgs>(args?: SelectSubset<T, CapsuleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Capsules and returns the data saved in the database.
     * @param {CapsuleCreateManyAndReturnArgs} args - Arguments to create many Capsules.
     * @example
     * // Create many Capsules
     * const capsule = await prisma.capsule.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Capsules and only return the `id`
     * const capsuleWithIdOnly = await prisma.capsule.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CapsuleCreateManyAndReturnArgs>(args?: SelectSubset<T, CapsuleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CapsulePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Capsule.
     * @param {CapsuleDeleteArgs} args - Arguments to delete one Capsule.
     * @example
     * // Delete one Capsule
     * const Capsule = await prisma.capsule.delete({
     *   where: {
     *     // ... filter to delete one Capsule
     *   }
     * })
     * 
     */
    delete<T extends CapsuleDeleteArgs>(args: SelectSubset<T, CapsuleDeleteArgs<ExtArgs>>): Prisma__CapsuleClient<$Result.GetResult<Prisma.$CapsulePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Capsule.
     * @param {CapsuleUpdateArgs} args - Arguments to update one Capsule.
     * @example
     * // Update one Capsule
     * const capsule = await prisma.capsule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CapsuleUpdateArgs>(args: SelectSubset<T, CapsuleUpdateArgs<ExtArgs>>): Prisma__CapsuleClient<$Result.GetResult<Prisma.$CapsulePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Capsules.
     * @param {CapsuleDeleteManyArgs} args - Arguments to filter Capsules to delete.
     * @example
     * // Delete a few Capsules
     * const { count } = await prisma.capsule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CapsuleDeleteManyArgs>(args?: SelectSubset<T, CapsuleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Capsules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CapsuleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Capsules
     * const capsule = await prisma.capsule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CapsuleUpdateManyArgs>(args: SelectSubset<T, CapsuleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Capsule.
     * @param {CapsuleUpsertArgs} args - Arguments to update or create a Capsule.
     * @example
     * // Update or create a Capsule
     * const capsule = await prisma.capsule.upsert({
     *   create: {
     *     // ... data to create a Capsule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Capsule we want to update
     *   }
     * })
     */
    upsert<T extends CapsuleUpsertArgs>(args: SelectSubset<T, CapsuleUpsertArgs<ExtArgs>>): Prisma__CapsuleClient<$Result.GetResult<Prisma.$CapsulePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Capsules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CapsuleCountArgs} args - Arguments to filter Capsules to count.
     * @example
     * // Count the number of Capsules
     * const count = await prisma.capsule.count({
     *   where: {
     *     // ... the filter for the Capsules we want to count
     *   }
     * })
    **/
    count<T extends CapsuleCountArgs>(
      args?: Subset<T, CapsuleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CapsuleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Capsule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CapsuleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CapsuleAggregateArgs>(args: Subset<T, CapsuleAggregateArgs>): Prisma.PrismaPromise<GetCapsuleAggregateType<T>>

    /**
     * Group by Capsule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CapsuleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CapsuleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CapsuleGroupByArgs['orderBy'] }
        : { orderBy?: CapsuleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CapsuleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCapsuleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Capsule model
   */
  readonly fields: CapsuleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Capsule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CapsuleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    premiumQuotes<T extends Capsule$premiumQuotesArgs<ExtArgs> = {}>(args?: Subset<T, Capsule$premiumQuotesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PremiumQuotePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Capsule model
   */ 
  interface CapsuleFieldRefs {
    readonly id: FieldRef<"Capsule", 'String'>
    readonly hash: FieldRef<"Capsule", 'String'>
    readonly specSig: FieldRef<"Capsule", 'String'>
    readonly riskScore: FieldRef<"Capsule", 'Float'>
    readonly reason: FieldRef<"Capsule", 'String'>
    readonly tenantId: FieldRef<"Capsule", 'String'>
    readonly createdAt: FieldRef<"Capsule", 'DateTime'>
    readonly updatedAt: FieldRef<"Capsule", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Capsule findUnique
   */
  export type CapsuleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capsule
     */
    select?: CapsuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapsuleInclude<ExtArgs> | null
    /**
     * Filter, which Capsule to fetch.
     */
    where: CapsuleWhereUniqueInput
  }

  /**
   * Capsule findUniqueOrThrow
   */
  export type CapsuleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capsule
     */
    select?: CapsuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapsuleInclude<ExtArgs> | null
    /**
     * Filter, which Capsule to fetch.
     */
    where: CapsuleWhereUniqueInput
  }

  /**
   * Capsule findFirst
   */
  export type CapsuleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capsule
     */
    select?: CapsuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapsuleInclude<ExtArgs> | null
    /**
     * Filter, which Capsule to fetch.
     */
    where?: CapsuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Capsules to fetch.
     */
    orderBy?: CapsuleOrderByWithRelationInput | CapsuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Capsules.
     */
    cursor?: CapsuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Capsules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Capsules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Capsules.
     */
    distinct?: CapsuleScalarFieldEnum | CapsuleScalarFieldEnum[]
  }

  /**
   * Capsule findFirstOrThrow
   */
  export type CapsuleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capsule
     */
    select?: CapsuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapsuleInclude<ExtArgs> | null
    /**
     * Filter, which Capsule to fetch.
     */
    where?: CapsuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Capsules to fetch.
     */
    orderBy?: CapsuleOrderByWithRelationInput | CapsuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Capsules.
     */
    cursor?: CapsuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Capsules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Capsules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Capsules.
     */
    distinct?: CapsuleScalarFieldEnum | CapsuleScalarFieldEnum[]
  }

  /**
   * Capsule findMany
   */
  export type CapsuleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capsule
     */
    select?: CapsuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapsuleInclude<ExtArgs> | null
    /**
     * Filter, which Capsules to fetch.
     */
    where?: CapsuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Capsules to fetch.
     */
    orderBy?: CapsuleOrderByWithRelationInput | CapsuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Capsules.
     */
    cursor?: CapsuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Capsules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Capsules.
     */
    skip?: number
    distinct?: CapsuleScalarFieldEnum | CapsuleScalarFieldEnum[]
  }

  /**
   * Capsule create
   */
  export type CapsuleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capsule
     */
    select?: CapsuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapsuleInclude<ExtArgs> | null
    /**
     * The data needed to create a Capsule.
     */
    data: XOR<CapsuleCreateInput, CapsuleUncheckedCreateInput>
  }

  /**
   * Capsule createMany
   */
  export type CapsuleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Capsules.
     */
    data: CapsuleCreateManyInput | CapsuleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Capsule createManyAndReturn
   */
  export type CapsuleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capsule
     */
    select?: CapsuleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Capsules.
     */
    data: CapsuleCreateManyInput | CapsuleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapsuleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Capsule update
   */
  export type CapsuleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capsule
     */
    select?: CapsuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapsuleInclude<ExtArgs> | null
    /**
     * The data needed to update a Capsule.
     */
    data: XOR<CapsuleUpdateInput, CapsuleUncheckedUpdateInput>
    /**
     * Choose, which Capsule to update.
     */
    where: CapsuleWhereUniqueInput
  }

  /**
   * Capsule updateMany
   */
  export type CapsuleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Capsules.
     */
    data: XOR<CapsuleUpdateManyMutationInput, CapsuleUncheckedUpdateManyInput>
    /**
     * Filter which Capsules to update
     */
    where?: CapsuleWhereInput
  }

  /**
   * Capsule upsert
   */
  export type CapsuleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capsule
     */
    select?: CapsuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapsuleInclude<ExtArgs> | null
    /**
     * The filter to search for the Capsule to update in case it exists.
     */
    where: CapsuleWhereUniqueInput
    /**
     * In case the Capsule found by the `where` argument doesn't exist, create a new Capsule with this data.
     */
    create: XOR<CapsuleCreateInput, CapsuleUncheckedCreateInput>
    /**
     * In case the Capsule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CapsuleUpdateInput, CapsuleUncheckedUpdateInput>
  }

  /**
   * Capsule delete
   */
  export type CapsuleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capsule
     */
    select?: CapsuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapsuleInclude<ExtArgs> | null
    /**
     * Filter which Capsule to delete.
     */
    where: CapsuleWhereUniqueInput
  }

  /**
   * Capsule deleteMany
   */
  export type CapsuleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Capsules to delete
     */
    where?: CapsuleWhereInput
  }

  /**
   * Capsule.premiumQuotes
   */
  export type Capsule$premiumQuotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumQuote
     */
    select?: PremiumQuoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumQuoteInclude<ExtArgs> | null
    where?: PremiumQuoteWhereInput
    orderBy?: PremiumQuoteOrderByWithRelationInput | PremiumQuoteOrderByWithRelationInput[]
    cursor?: PremiumQuoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PremiumQuoteScalarFieldEnum | PremiumQuoteScalarFieldEnum[]
  }

  /**
   * Capsule without action
   */
  export type CapsuleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Capsule
     */
    select?: CapsuleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CapsuleInclude<ExtArgs> | null
  }


  /**
   * Model PremiumQuote
   */

  export type AggregatePremiumQuote = {
    _count: PremiumQuoteCountAggregateOutputType | null
    _avg: PremiumQuoteAvgAggregateOutputType | null
    _sum: PremiumQuoteSumAggregateOutputType | null
    _min: PremiumQuoteMinAggregateOutputType | null
    _max: PremiumQuoteMaxAggregateOutputType | null
  }

  export type PremiumQuoteAvgAggregateOutputType = {
    riskScore: number | null
    annualUsd: number | null
  }

  export type PremiumQuoteSumAggregateOutputType = {
    riskScore: number | null
    annualUsd: number | null
  }

  export type PremiumQuoteMinAggregateOutputType = {
    id: string | null
    capsuleHash: string | null
    riskScore: number | null
    annualUsd: number | null
    tenantId: string | null
    createdAt: Date | null
  }

  export type PremiumQuoteMaxAggregateOutputType = {
    id: string | null
    capsuleHash: string | null
    riskScore: number | null
    annualUsd: number | null
    tenantId: string | null
    createdAt: Date | null
  }

  export type PremiumQuoteCountAggregateOutputType = {
    id: number
    capsuleHash: number
    riskScore: number
    annualUsd: number
    tenantId: number
    createdAt: number
    _all: number
  }


  export type PremiumQuoteAvgAggregateInputType = {
    riskScore?: true
    annualUsd?: true
  }

  export type PremiumQuoteSumAggregateInputType = {
    riskScore?: true
    annualUsd?: true
  }

  export type PremiumQuoteMinAggregateInputType = {
    id?: true
    capsuleHash?: true
    riskScore?: true
    annualUsd?: true
    tenantId?: true
    createdAt?: true
  }

  export type PremiumQuoteMaxAggregateInputType = {
    id?: true
    capsuleHash?: true
    riskScore?: true
    annualUsd?: true
    tenantId?: true
    createdAt?: true
  }

  export type PremiumQuoteCountAggregateInputType = {
    id?: true
    capsuleHash?: true
    riskScore?: true
    annualUsd?: true
    tenantId?: true
    createdAt?: true
    _all?: true
  }

  export type PremiumQuoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PremiumQuote to aggregate.
     */
    where?: PremiumQuoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PremiumQuotes to fetch.
     */
    orderBy?: PremiumQuoteOrderByWithRelationInput | PremiumQuoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PremiumQuoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PremiumQuotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PremiumQuotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PremiumQuotes
    **/
    _count?: true | PremiumQuoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PremiumQuoteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PremiumQuoteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PremiumQuoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PremiumQuoteMaxAggregateInputType
  }

  export type GetPremiumQuoteAggregateType<T extends PremiumQuoteAggregateArgs> = {
        [P in keyof T & keyof AggregatePremiumQuote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePremiumQuote[P]>
      : GetScalarType<T[P], AggregatePremiumQuote[P]>
  }




  export type PremiumQuoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PremiumQuoteWhereInput
    orderBy?: PremiumQuoteOrderByWithAggregationInput | PremiumQuoteOrderByWithAggregationInput[]
    by: PremiumQuoteScalarFieldEnum[] | PremiumQuoteScalarFieldEnum
    having?: PremiumQuoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PremiumQuoteCountAggregateInputType | true
    _avg?: PremiumQuoteAvgAggregateInputType
    _sum?: PremiumQuoteSumAggregateInputType
    _min?: PremiumQuoteMinAggregateInputType
    _max?: PremiumQuoteMaxAggregateInputType
  }

  export type PremiumQuoteGroupByOutputType = {
    id: string
    capsuleHash: string
    riskScore: number
    annualUsd: number
    tenantId: string
    createdAt: Date
    _count: PremiumQuoteCountAggregateOutputType | null
    _avg: PremiumQuoteAvgAggregateOutputType | null
    _sum: PremiumQuoteSumAggregateOutputType | null
    _min: PremiumQuoteMinAggregateOutputType | null
    _max: PremiumQuoteMaxAggregateOutputType | null
  }

  type GetPremiumQuoteGroupByPayload<T extends PremiumQuoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PremiumQuoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PremiumQuoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PremiumQuoteGroupByOutputType[P]>
            : GetScalarType<T[P], PremiumQuoteGroupByOutputType[P]>
        }
      >
    >


  export type PremiumQuoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    capsuleHash?: boolean
    riskScore?: boolean
    annualUsd?: boolean
    tenantId?: boolean
    createdAt?: boolean
    capsule?: boolean | CapsuleDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["premiumQuote"]>

  export type PremiumQuoteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    capsuleHash?: boolean
    riskScore?: boolean
    annualUsd?: boolean
    tenantId?: boolean
    createdAt?: boolean
    capsule?: boolean | CapsuleDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["premiumQuote"]>

  export type PremiumQuoteSelectScalar = {
    id?: boolean
    capsuleHash?: boolean
    riskScore?: boolean
    annualUsd?: boolean
    tenantId?: boolean
    createdAt?: boolean
  }

  export type PremiumQuoteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    capsule?: boolean | CapsuleDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type PremiumQuoteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    capsule?: boolean | CapsuleDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $PremiumQuotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PremiumQuote"
    objects: {
      capsule: Prisma.$CapsulePayload<ExtArgs>
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      capsuleHash: string
      riskScore: number
      annualUsd: number
      tenantId: string
      createdAt: Date
    }, ExtArgs["result"]["premiumQuote"]>
    composites: {}
  }

  type PremiumQuoteGetPayload<S extends boolean | null | undefined | PremiumQuoteDefaultArgs> = $Result.GetResult<Prisma.$PremiumQuotePayload, S>

  type PremiumQuoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PremiumQuoteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PremiumQuoteCountAggregateInputType | true
    }

  export interface PremiumQuoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PremiumQuote'], meta: { name: 'PremiumQuote' } }
    /**
     * Find zero or one PremiumQuote that matches the filter.
     * @param {PremiumQuoteFindUniqueArgs} args - Arguments to find a PremiumQuote
     * @example
     * // Get one PremiumQuote
     * const premiumQuote = await prisma.premiumQuote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PremiumQuoteFindUniqueArgs>(args: SelectSubset<T, PremiumQuoteFindUniqueArgs<ExtArgs>>): Prisma__PremiumQuoteClient<$Result.GetResult<Prisma.$PremiumQuotePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PremiumQuote that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PremiumQuoteFindUniqueOrThrowArgs} args - Arguments to find a PremiumQuote
     * @example
     * // Get one PremiumQuote
     * const premiumQuote = await prisma.premiumQuote.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PremiumQuoteFindUniqueOrThrowArgs>(args: SelectSubset<T, PremiumQuoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PremiumQuoteClient<$Result.GetResult<Prisma.$PremiumQuotePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PremiumQuote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiumQuoteFindFirstArgs} args - Arguments to find a PremiumQuote
     * @example
     * // Get one PremiumQuote
     * const premiumQuote = await prisma.premiumQuote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PremiumQuoteFindFirstArgs>(args?: SelectSubset<T, PremiumQuoteFindFirstArgs<ExtArgs>>): Prisma__PremiumQuoteClient<$Result.GetResult<Prisma.$PremiumQuotePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PremiumQuote that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiumQuoteFindFirstOrThrowArgs} args - Arguments to find a PremiumQuote
     * @example
     * // Get one PremiumQuote
     * const premiumQuote = await prisma.premiumQuote.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PremiumQuoteFindFirstOrThrowArgs>(args?: SelectSubset<T, PremiumQuoteFindFirstOrThrowArgs<ExtArgs>>): Prisma__PremiumQuoteClient<$Result.GetResult<Prisma.$PremiumQuotePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PremiumQuotes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiumQuoteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PremiumQuotes
     * const premiumQuotes = await prisma.premiumQuote.findMany()
     * 
     * // Get first 10 PremiumQuotes
     * const premiumQuotes = await prisma.premiumQuote.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const premiumQuoteWithIdOnly = await prisma.premiumQuote.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PremiumQuoteFindManyArgs>(args?: SelectSubset<T, PremiumQuoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PremiumQuotePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PremiumQuote.
     * @param {PremiumQuoteCreateArgs} args - Arguments to create a PremiumQuote.
     * @example
     * // Create one PremiumQuote
     * const PremiumQuote = await prisma.premiumQuote.create({
     *   data: {
     *     // ... data to create a PremiumQuote
     *   }
     * })
     * 
     */
    create<T extends PremiumQuoteCreateArgs>(args: SelectSubset<T, PremiumQuoteCreateArgs<ExtArgs>>): Prisma__PremiumQuoteClient<$Result.GetResult<Prisma.$PremiumQuotePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PremiumQuotes.
     * @param {PremiumQuoteCreateManyArgs} args - Arguments to create many PremiumQuotes.
     * @example
     * // Create many PremiumQuotes
     * const premiumQuote = await prisma.premiumQuote.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PremiumQuoteCreateManyArgs>(args?: SelectSubset<T, PremiumQuoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PremiumQuotes and returns the data saved in the database.
     * @param {PremiumQuoteCreateManyAndReturnArgs} args - Arguments to create many PremiumQuotes.
     * @example
     * // Create many PremiumQuotes
     * const premiumQuote = await prisma.premiumQuote.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PremiumQuotes and only return the `id`
     * const premiumQuoteWithIdOnly = await prisma.premiumQuote.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PremiumQuoteCreateManyAndReturnArgs>(args?: SelectSubset<T, PremiumQuoteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PremiumQuotePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PremiumQuote.
     * @param {PremiumQuoteDeleteArgs} args - Arguments to delete one PremiumQuote.
     * @example
     * // Delete one PremiumQuote
     * const PremiumQuote = await prisma.premiumQuote.delete({
     *   where: {
     *     // ... filter to delete one PremiumQuote
     *   }
     * })
     * 
     */
    delete<T extends PremiumQuoteDeleteArgs>(args: SelectSubset<T, PremiumQuoteDeleteArgs<ExtArgs>>): Prisma__PremiumQuoteClient<$Result.GetResult<Prisma.$PremiumQuotePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PremiumQuote.
     * @param {PremiumQuoteUpdateArgs} args - Arguments to update one PremiumQuote.
     * @example
     * // Update one PremiumQuote
     * const premiumQuote = await prisma.premiumQuote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PremiumQuoteUpdateArgs>(args: SelectSubset<T, PremiumQuoteUpdateArgs<ExtArgs>>): Prisma__PremiumQuoteClient<$Result.GetResult<Prisma.$PremiumQuotePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PremiumQuotes.
     * @param {PremiumQuoteDeleteManyArgs} args - Arguments to filter PremiumQuotes to delete.
     * @example
     * // Delete a few PremiumQuotes
     * const { count } = await prisma.premiumQuote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PremiumQuoteDeleteManyArgs>(args?: SelectSubset<T, PremiumQuoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PremiumQuotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiumQuoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PremiumQuotes
     * const premiumQuote = await prisma.premiumQuote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PremiumQuoteUpdateManyArgs>(args: SelectSubset<T, PremiumQuoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PremiumQuote.
     * @param {PremiumQuoteUpsertArgs} args - Arguments to update or create a PremiumQuote.
     * @example
     * // Update or create a PremiumQuote
     * const premiumQuote = await prisma.premiumQuote.upsert({
     *   create: {
     *     // ... data to create a PremiumQuote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PremiumQuote we want to update
     *   }
     * })
     */
    upsert<T extends PremiumQuoteUpsertArgs>(args: SelectSubset<T, PremiumQuoteUpsertArgs<ExtArgs>>): Prisma__PremiumQuoteClient<$Result.GetResult<Prisma.$PremiumQuotePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PremiumQuotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiumQuoteCountArgs} args - Arguments to filter PremiumQuotes to count.
     * @example
     * // Count the number of PremiumQuotes
     * const count = await prisma.premiumQuote.count({
     *   where: {
     *     // ... the filter for the PremiumQuotes we want to count
     *   }
     * })
    **/
    count<T extends PremiumQuoteCountArgs>(
      args?: Subset<T, PremiumQuoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PremiumQuoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PremiumQuote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiumQuoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PremiumQuoteAggregateArgs>(args: Subset<T, PremiumQuoteAggregateArgs>): Prisma.PrismaPromise<GetPremiumQuoteAggregateType<T>>

    /**
     * Group by PremiumQuote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiumQuoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PremiumQuoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PremiumQuoteGroupByArgs['orderBy'] }
        : { orderBy?: PremiumQuoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PremiumQuoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPremiumQuoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PremiumQuote model
   */
  readonly fields: PremiumQuoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PremiumQuote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PremiumQuoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    capsule<T extends CapsuleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CapsuleDefaultArgs<ExtArgs>>): Prisma__CapsuleClient<$Result.GetResult<Prisma.$CapsulePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PremiumQuote model
   */ 
  interface PremiumQuoteFieldRefs {
    readonly id: FieldRef<"PremiumQuote", 'String'>
    readonly capsuleHash: FieldRef<"PremiumQuote", 'String'>
    readonly riskScore: FieldRef<"PremiumQuote", 'Float'>
    readonly annualUsd: FieldRef<"PremiumQuote", 'Float'>
    readonly tenantId: FieldRef<"PremiumQuote", 'String'>
    readonly createdAt: FieldRef<"PremiumQuote", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PremiumQuote findUnique
   */
  export type PremiumQuoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumQuote
     */
    select?: PremiumQuoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumQuoteInclude<ExtArgs> | null
    /**
     * Filter, which PremiumQuote to fetch.
     */
    where: PremiumQuoteWhereUniqueInput
  }

  /**
   * PremiumQuote findUniqueOrThrow
   */
  export type PremiumQuoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumQuote
     */
    select?: PremiumQuoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumQuoteInclude<ExtArgs> | null
    /**
     * Filter, which PremiumQuote to fetch.
     */
    where: PremiumQuoteWhereUniqueInput
  }

  /**
   * PremiumQuote findFirst
   */
  export type PremiumQuoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumQuote
     */
    select?: PremiumQuoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumQuoteInclude<ExtArgs> | null
    /**
     * Filter, which PremiumQuote to fetch.
     */
    where?: PremiumQuoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PremiumQuotes to fetch.
     */
    orderBy?: PremiumQuoteOrderByWithRelationInput | PremiumQuoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PremiumQuotes.
     */
    cursor?: PremiumQuoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PremiumQuotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PremiumQuotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PremiumQuotes.
     */
    distinct?: PremiumQuoteScalarFieldEnum | PremiumQuoteScalarFieldEnum[]
  }

  /**
   * PremiumQuote findFirstOrThrow
   */
  export type PremiumQuoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumQuote
     */
    select?: PremiumQuoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumQuoteInclude<ExtArgs> | null
    /**
     * Filter, which PremiumQuote to fetch.
     */
    where?: PremiumQuoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PremiumQuotes to fetch.
     */
    orderBy?: PremiumQuoteOrderByWithRelationInput | PremiumQuoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PremiumQuotes.
     */
    cursor?: PremiumQuoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PremiumQuotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PremiumQuotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PremiumQuotes.
     */
    distinct?: PremiumQuoteScalarFieldEnum | PremiumQuoteScalarFieldEnum[]
  }

  /**
   * PremiumQuote findMany
   */
  export type PremiumQuoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumQuote
     */
    select?: PremiumQuoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumQuoteInclude<ExtArgs> | null
    /**
     * Filter, which PremiumQuotes to fetch.
     */
    where?: PremiumQuoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PremiumQuotes to fetch.
     */
    orderBy?: PremiumQuoteOrderByWithRelationInput | PremiumQuoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PremiumQuotes.
     */
    cursor?: PremiumQuoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PremiumQuotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PremiumQuotes.
     */
    skip?: number
    distinct?: PremiumQuoteScalarFieldEnum | PremiumQuoteScalarFieldEnum[]
  }

  /**
   * PremiumQuote create
   */
  export type PremiumQuoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumQuote
     */
    select?: PremiumQuoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumQuoteInclude<ExtArgs> | null
    /**
     * The data needed to create a PremiumQuote.
     */
    data: XOR<PremiumQuoteCreateInput, PremiumQuoteUncheckedCreateInput>
  }

  /**
   * PremiumQuote createMany
   */
  export type PremiumQuoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PremiumQuotes.
     */
    data: PremiumQuoteCreateManyInput | PremiumQuoteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PremiumQuote createManyAndReturn
   */
  export type PremiumQuoteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumQuote
     */
    select?: PremiumQuoteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PremiumQuotes.
     */
    data: PremiumQuoteCreateManyInput | PremiumQuoteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumQuoteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PremiumQuote update
   */
  export type PremiumQuoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumQuote
     */
    select?: PremiumQuoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumQuoteInclude<ExtArgs> | null
    /**
     * The data needed to update a PremiumQuote.
     */
    data: XOR<PremiumQuoteUpdateInput, PremiumQuoteUncheckedUpdateInput>
    /**
     * Choose, which PremiumQuote to update.
     */
    where: PremiumQuoteWhereUniqueInput
  }

  /**
   * PremiumQuote updateMany
   */
  export type PremiumQuoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PremiumQuotes.
     */
    data: XOR<PremiumQuoteUpdateManyMutationInput, PremiumQuoteUncheckedUpdateManyInput>
    /**
     * Filter which PremiumQuotes to update
     */
    where?: PremiumQuoteWhereInput
  }

  /**
   * PremiumQuote upsert
   */
  export type PremiumQuoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumQuote
     */
    select?: PremiumQuoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumQuoteInclude<ExtArgs> | null
    /**
     * The filter to search for the PremiumQuote to update in case it exists.
     */
    where: PremiumQuoteWhereUniqueInput
    /**
     * In case the PremiumQuote found by the `where` argument doesn't exist, create a new PremiumQuote with this data.
     */
    create: XOR<PremiumQuoteCreateInput, PremiumQuoteUncheckedCreateInput>
    /**
     * In case the PremiumQuote was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PremiumQuoteUpdateInput, PremiumQuoteUncheckedUpdateInput>
  }

  /**
   * PremiumQuote delete
   */
  export type PremiumQuoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumQuote
     */
    select?: PremiumQuoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumQuoteInclude<ExtArgs> | null
    /**
     * Filter which PremiumQuote to delete.
     */
    where: PremiumQuoteWhereUniqueInput
  }

  /**
   * PremiumQuote deleteMany
   */
  export type PremiumQuoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PremiumQuotes to delete
     */
    where?: PremiumQuoteWhereInput
  }

  /**
   * PremiumQuote without action
   */
  export type PremiumQuoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumQuote
     */
    select?: PremiumQuoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumQuoteInclude<ExtArgs> | null
  }


  /**
   * Model UsageEvent
   */

  export type AggregateUsageEvent = {
    _count: UsageEventCountAggregateOutputType | null
    _avg: UsageEventAvgAggregateOutputType | null
    _sum: UsageEventSumAggregateOutputType | null
    _min: UsageEventMinAggregateOutputType | null
    _max: UsageEventMaxAggregateOutputType | null
  }

  export type UsageEventAvgAggregateOutputType = {
    cpuMs: number | null
    netBytes: number | null
  }

  export type UsageEventSumAggregateOutputType = {
    cpuMs: number | null
    netBytes: number | null
  }

  export type UsageEventMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    cpuMs: number | null
    netBytes: number | null
    ts: Date | null
    createdAt: Date | null
  }

  export type UsageEventMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    cpuMs: number | null
    netBytes: number | null
    ts: Date | null
    createdAt: Date | null
  }

  export type UsageEventCountAggregateOutputType = {
    id: number
    tenantId: number
    cpuMs: number
    netBytes: number
    ts: number
    createdAt: number
    _all: number
  }


  export type UsageEventAvgAggregateInputType = {
    cpuMs?: true
    netBytes?: true
  }

  export type UsageEventSumAggregateInputType = {
    cpuMs?: true
    netBytes?: true
  }

  export type UsageEventMinAggregateInputType = {
    id?: true
    tenantId?: true
    cpuMs?: true
    netBytes?: true
    ts?: true
    createdAt?: true
  }

  export type UsageEventMaxAggregateInputType = {
    id?: true
    tenantId?: true
    cpuMs?: true
    netBytes?: true
    ts?: true
    createdAt?: true
  }

  export type UsageEventCountAggregateInputType = {
    id?: true
    tenantId?: true
    cpuMs?: true
    netBytes?: true
    ts?: true
    createdAt?: true
    _all?: true
  }

  export type UsageEventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UsageEvent to aggregate.
     */
    where?: UsageEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsageEvents to fetch.
     */
    orderBy?: UsageEventOrderByWithRelationInput | UsageEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsageEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsageEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsageEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UsageEvents
    **/
    _count?: true | UsageEventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsageEventAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsageEventSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsageEventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsageEventMaxAggregateInputType
  }

  export type GetUsageEventAggregateType<T extends UsageEventAggregateArgs> = {
        [P in keyof T & keyof AggregateUsageEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsageEvent[P]>
      : GetScalarType<T[P], AggregateUsageEvent[P]>
  }




  export type UsageEventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsageEventWhereInput
    orderBy?: UsageEventOrderByWithAggregationInput | UsageEventOrderByWithAggregationInput[]
    by: UsageEventScalarFieldEnum[] | UsageEventScalarFieldEnum
    having?: UsageEventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsageEventCountAggregateInputType | true
    _avg?: UsageEventAvgAggregateInputType
    _sum?: UsageEventSumAggregateInputType
    _min?: UsageEventMinAggregateInputType
    _max?: UsageEventMaxAggregateInputType
  }

  export type UsageEventGroupByOutputType = {
    id: string
    tenantId: string
    cpuMs: number
    netBytes: number
    ts: Date
    createdAt: Date
    _count: UsageEventCountAggregateOutputType | null
    _avg: UsageEventAvgAggregateOutputType | null
    _sum: UsageEventSumAggregateOutputType | null
    _min: UsageEventMinAggregateOutputType | null
    _max: UsageEventMaxAggregateOutputType | null
  }

  type GetUsageEventGroupByPayload<T extends UsageEventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsageEventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsageEventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsageEventGroupByOutputType[P]>
            : GetScalarType<T[P], UsageEventGroupByOutputType[P]>
        }
      >
    >


  export type UsageEventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    cpuMs?: boolean
    netBytes?: boolean
    ts?: boolean
    createdAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usageEvent"]>

  export type UsageEventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    cpuMs?: boolean
    netBytes?: boolean
    ts?: boolean
    createdAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usageEvent"]>

  export type UsageEventSelectScalar = {
    id?: boolean
    tenantId?: boolean
    cpuMs?: boolean
    netBytes?: boolean
    ts?: boolean
    createdAt?: boolean
  }

  export type UsageEventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type UsageEventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $UsageEventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UsageEvent"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string
      cpuMs: number
      netBytes: number
      ts: Date
      createdAt: Date
    }, ExtArgs["result"]["usageEvent"]>
    composites: {}
  }

  type UsageEventGetPayload<S extends boolean | null | undefined | UsageEventDefaultArgs> = $Result.GetResult<Prisma.$UsageEventPayload, S>

  type UsageEventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsageEventFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsageEventCountAggregateInputType | true
    }

  export interface UsageEventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UsageEvent'], meta: { name: 'UsageEvent' } }
    /**
     * Find zero or one UsageEvent that matches the filter.
     * @param {UsageEventFindUniqueArgs} args - Arguments to find a UsageEvent
     * @example
     * // Get one UsageEvent
     * const usageEvent = await prisma.usageEvent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsageEventFindUniqueArgs>(args: SelectSubset<T, UsageEventFindUniqueArgs<ExtArgs>>): Prisma__UsageEventClient<$Result.GetResult<Prisma.$UsageEventPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UsageEvent that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UsageEventFindUniqueOrThrowArgs} args - Arguments to find a UsageEvent
     * @example
     * // Get one UsageEvent
     * const usageEvent = await prisma.usageEvent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsageEventFindUniqueOrThrowArgs>(args: SelectSubset<T, UsageEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsageEventClient<$Result.GetResult<Prisma.$UsageEventPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UsageEvent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageEventFindFirstArgs} args - Arguments to find a UsageEvent
     * @example
     * // Get one UsageEvent
     * const usageEvent = await prisma.usageEvent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsageEventFindFirstArgs>(args?: SelectSubset<T, UsageEventFindFirstArgs<ExtArgs>>): Prisma__UsageEventClient<$Result.GetResult<Prisma.$UsageEventPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UsageEvent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageEventFindFirstOrThrowArgs} args - Arguments to find a UsageEvent
     * @example
     * // Get one UsageEvent
     * const usageEvent = await prisma.usageEvent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsageEventFindFirstOrThrowArgs>(args?: SelectSubset<T, UsageEventFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsageEventClient<$Result.GetResult<Prisma.$UsageEventPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UsageEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageEventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UsageEvents
     * const usageEvents = await prisma.usageEvent.findMany()
     * 
     * // Get first 10 UsageEvents
     * const usageEvents = await prisma.usageEvent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usageEventWithIdOnly = await prisma.usageEvent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsageEventFindManyArgs>(args?: SelectSubset<T, UsageEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsageEventPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UsageEvent.
     * @param {UsageEventCreateArgs} args - Arguments to create a UsageEvent.
     * @example
     * // Create one UsageEvent
     * const UsageEvent = await prisma.usageEvent.create({
     *   data: {
     *     // ... data to create a UsageEvent
     *   }
     * })
     * 
     */
    create<T extends UsageEventCreateArgs>(args: SelectSubset<T, UsageEventCreateArgs<ExtArgs>>): Prisma__UsageEventClient<$Result.GetResult<Prisma.$UsageEventPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UsageEvents.
     * @param {UsageEventCreateManyArgs} args - Arguments to create many UsageEvents.
     * @example
     * // Create many UsageEvents
     * const usageEvent = await prisma.usageEvent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsageEventCreateManyArgs>(args?: SelectSubset<T, UsageEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UsageEvents and returns the data saved in the database.
     * @param {UsageEventCreateManyAndReturnArgs} args - Arguments to create many UsageEvents.
     * @example
     * // Create many UsageEvents
     * const usageEvent = await prisma.usageEvent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UsageEvents and only return the `id`
     * const usageEventWithIdOnly = await prisma.usageEvent.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsageEventCreateManyAndReturnArgs>(args?: SelectSubset<T, UsageEventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsageEventPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UsageEvent.
     * @param {UsageEventDeleteArgs} args - Arguments to delete one UsageEvent.
     * @example
     * // Delete one UsageEvent
     * const UsageEvent = await prisma.usageEvent.delete({
     *   where: {
     *     // ... filter to delete one UsageEvent
     *   }
     * })
     * 
     */
    delete<T extends UsageEventDeleteArgs>(args: SelectSubset<T, UsageEventDeleteArgs<ExtArgs>>): Prisma__UsageEventClient<$Result.GetResult<Prisma.$UsageEventPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UsageEvent.
     * @param {UsageEventUpdateArgs} args - Arguments to update one UsageEvent.
     * @example
     * // Update one UsageEvent
     * const usageEvent = await prisma.usageEvent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsageEventUpdateArgs>(args: SelectSubset<T, UsageEventUpdateArgs<ExtArgs>>): Prisma__UsageEventClient<$Result.GetResult<Prisma.$UsageEventPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UsageEvents.
     * @param {UsageEventDeleteManyArgs} args - Arguments to filter UsageEvents to delete.
     * @example
     * // Delete a few UsageEvents
     * const { count } = await prisma.usageEvent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsageEventDeleteManyArgs>(args?: SelectSubset<T, UsageEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UsageEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageEventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UsageEvents
     * const usageEvent = await prisma.usageEvent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsageEventUpdateManyArgs>(args: SelectSubset<T, UsageEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UsageEvent.
     * @param {UsageEventUpsertArgs} args - Arguments to update or create a UsageEvent.
     * @example
     * // Update or create a UsageEvent
     * const usageEvent = await prisma.usageEvent.upsert({
     *   create: {
     *     // ... data to create a UsageEvent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UsageEvent we want to update
     *   }
     * })
     */
    upsert<T extends UsageEventUpsertArgs>(args: SelectSubset<T, UsageEventUpsertArgs<ExtArgs>>): Prisma__UsageEventClient<$Result.GetResult<Prisma.$UsageEventPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UsageEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageEventCountArgs} args - Arguments to filter UsageEvents to count.
     * @example
     * // Count the number of UsageEvents
     * const count = await prisma.usageEvent.count({
     *   where: {
     *     // ... the filter for the UsageEvents we want to count
     *   }
     * })
    **/
    count<T extends UsageEventCountArgs>(
      args?: Subset<T, UsageEventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsageEventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UsageEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsageEventAggregateArgs>(args: Subset<T, UsageEventAggregateArgs>): Prisma.PrismaPromise<GetUsageEventAggregateType<T>>

    /**
     * Group by UsageEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageEventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsageEventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsageEventGroupByArgs['orderBy'] }
        : { orderBy?: UsageEventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsageEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsageEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UsageEvent model
   */
  readonly fields: UsageEventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UsageEvent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsageEventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UsageEvent model
   */ 
  interface UsageEventFieldRefs {
    readonly id: FieldRef<"UsageEvent", 'String'>
    readonly tenantId: FieldRef<"UsageEvent", 'String'>
    readonly cpuMs: FieldRef<"UsageEvent", 'Int'>
    readonly netBytes: FieldRef<"UsageEvent", 'Int'>
    readonly ts: FieldRef<"UsageEvent", 'DateTime'>
    readonly createdAt: FieldRef<"UsageEvent", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UsageEvent findUnique
   */
  export type UsageEventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageEvent
     */
    select?: UsageEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageEventInclude<ExtArgs> | null
    /**
     * Filter, which UsageEvent to fetch.
     */
    where: UsageEventWhereUniqueInput
  }

  /**
   * UsageEvent findUniqueOrThrow
   */
  export type UsageEventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageEvent
     */
    select?: UsageEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageEventInclude<ExtArgs> | null
    /**
     * Filter, which UsageEvent to fetch.
     */
    where: UsageEventWhereUniqueInput
  }

  /**
   * UsageEvent findFirst
   */
  export type UsageEventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageEvent
     */
    select?: UsageEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageEventInclude<ExtArgs> | null
    /**
     * Filter, which UsageEvent to fetch.
     */
    where?: UsageEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsageEvents to fetch.
     */
    orderBy?: UsageEventOrderByWithRelationInput | UsageEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UsageEvents.
     */
    cursor?: UsageEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsageEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsageEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UsageEvents.
     */
    distinct?: UsageEventScalarFieldEnum | UsageEventScalarFieldEnum[]
  }

  /**
   * UsageEvent findFirstOrThrow
   */
  export type UsageEventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageEvent
     */
    select?: UsageEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageEventInclude<ExtArgs> | null
    /**
     * Filter, which UsageEvent to fetch.
     */
    where?: UsageEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsageEvents to fetch.
     */
    orderBy?: UsageEventOrderByWithRelationInput | UsageEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UsageEvents.
     */
    cursor?: UsageEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsageEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsageEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UsageEvents.
     */
    distinct?: UsageEventScalarFieldEnum | UsageEventScalarFieldEnum[]
  }

  /**
   * UsageEvent findMany
   */
  export type UsageEventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageEvent
     */
    select?: UsageEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageEventInclude<ExtArgs> | null
    /**
     * Filter, which UsageEvents to fetch.
     */
    where?: UsageEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsageEvents to fetch.
     */
    orderBy?: UsageEventOrderByWithRelationInput | UsageEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UsageEvents.
     */
    cursor?: UsageEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsageEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsageEvents.
     */
    skip?: number
    distinct?: UsageEventScalarFieldEnum | UsageEventScalarFieldEnum[]
  }

  /**
   * UsageEvent create
   */
  export type UsageEventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageEvent
     */
    select?: UsageEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageEventInclude<ExtArgs> | null
    /**
     * The data needed to create a UsageEvent.
     */
    data: XOR<UsageEventCreateInput, UsageEventUncheckedCreateInput>
  }

  /**
   * UsageEvent createMany
   */
  export type UsageEventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UsageEvents.
     */
    data: UsageEventCreateManyInput | UsageEventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UsageEvent createManyAndReturn
   */
  export type UsageEventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageEvent
     */
    select?: UsageEventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UsageEvents.
     */
    data: UsageEventCreateManyInput | UsageEventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageEventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UsageEvent update
   */
  export type UsageEventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageEvent
     */
    select?: UsageEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageEventInclude<ExtArgs> | null
    /**
     * The data needed to update a UsageEvent.
     */
    data: XOR<UsageEventUpdateInput, UsageEventUncheckedUpdateInput>
    /**
     * Choose, which UsageEvent to update.
     */
    where: UsageEventWhereUniqueInput
  }

  /**
   * UsageEvent updateMany
   */
  export type UsageEventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UsageEvents.
     */
    data: XOR<UsageEventUpdateManyMutationInput, UsageEventUncheckedUpdateManyInput>
    /**
     * Filter which UsageEvents to update
     */
    where?: UsageEventWhereInput
  }

  /**
   * UsageEvent upsert
   */
  export type UsageEventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageEvent
     */
    select?: UsageEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageEventInclude<ExtArgs> | null
    /**
     * The filter to search for the UsageEvent to update in case it exists.
     */
    where: UsageEventWhereUniqueInput
    /**
     * In case the UsageEvent found by the `where` argument doesn't exist, create a new UsageEvent with this data.
     */
    create: XOR<UsageEventCreateInput, UsageEventUncheckedCreateInput>
    /**
     * In case the UsageEvent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsageEventUpdateInput, UsageEventUncheckedUpdateInput>
  }

  /**
   * UsageEvent delete
   */
  export type UsageEventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageEvent
     */
    select?: UsageEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageEventInclude<ExtArgs> | null
    /**
     * Filter which UsageEvent to delete.
     */
    where: UsageEventWhereUniqueInput
  }

  /**
   * UsageEvent deleteMany
   */
  export type UsageEventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UsageEvents to delete
     */
    where?: UsageEventWhereInput
  }

  /**
   * UsageEvent without action
   */
  export type UsageEventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageEvent
     */
    select?: UsageEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageEventInclude<ExtArgs> | null
  }


  /**
   * Model TenantInvoice
   */

  export type AggregateTenantInvoice = {
    _count: TenantInvoiceCountAggregateOutputType | null
    _avg: TenantInvoiceAvgAggregateOutputType | null
    _sum: TenantInvoiceSumAggregateOutputType | null
    _min: TenantInvoiceMinAggregateOutputType | null
    _max: TenantInvoiceMaxAggregateOutputType | null
  }

  export type TenantInvoiceAvgAggregateOutputType = {
    costUsd: number | null
    usageEvents: number | null
    totalCpuMs: number | null
    totalNetBytes: number | null
  }

  export type TenantInvoiceSumAggregateOutputType = {
    costUsd: number | null
    usageEvents: number | null
    totalCpuMs: number | null
    totalNetBytes: number | null
  }

  export type TenantInvoiceMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    periodStart: Date | null
    periodEnd: Date | null
    costUsd: number | null
    usageEvents: number | null
    totalCpuMs: number | null
    totalNetBytes: number | null
    createdAt: Date | null
  }

  export type TenantInvoiceMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    periodStart: Date | null
    periodEnd: Date | null
    costUsd: number | null
    usageEvents: number | null
    totalCpuMs: number | null
    totalNetBytes: number | null
    createdAt: Date | null
  }

  export type TenantInvoiceCountAggregateOutputType = {
    id: number
    tenantId: number
    periodStart: number
    periodEnd: number
    costUsd: number
    usageEvents: number
    totalCpuMs: number
    totalNetBytes: number
    createdAt: number
    _all: number
  }


  export type TenantInvoiceAvgAggregateInputType = {
    costUsd?: true
    usageEvents?: true
    totalCpuMs?: true
    totalNetBytes?: true
  }

  export type TenantInvoiceSumAggregateInputType = {
    costUsd?: true
    usageEvents?: true
    totalCpuMs?: true
    totalNetBytes?: true
  }

  export type TenantInvoiceMinAggregateInputType = {
    id?: true
    tenantId?: true
    periodStart?: true
    periodEnd?: true
    costUsd?: true
    usageEvents?: true
    totalCpuMs?: true
    totalNetBytes?: true
    createdAt?: true
  }

  export type TenantInvoiceMaxAggregateInputType = {
    id?: true
    tenantId?: true
    periodStart?: true
    periodEnd?: true
    costUsd?: true
    usageEvents?: true
    totalCpuMs?: true
    totalNetBytes?: true
    createdAt?: true
  }

  export type TenantInvoiceCountAggregateInputType = {
    id?: true
    tenantId?: true
    periodStart?: true
    periodEnd?: true
    costUsd?: true
    usageEvents?: true
    totalCpuMs?: true
    totalNetBytes?: true
    createdAt?: true
    _all?: true
  }

  export type TenantInvoiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TenantInvoice to aggregate.
     */
    where?: TenantInvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TenantInvoices to fetch.
     */
    orderBy?: TenantInvoiceOrderByWithRelationInput | TenantInvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TenantInvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TenantInvoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TenantInvoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TenantInvoices
    **/
    _count?: true | TenantInvoiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TenantInvoiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TenantInvoiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TenantInvoiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TenantInvoiceMaxAggregateInputType
  }

  export type GetTenantInvoiceAggregateType<T extends TenantInvoiceAggregateArgs> = {
        [P in keyof T & keyof AggregateTenantInvoice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTenantInvoice[P]>
      : GetScalarType<T[P], AggregateTenantInvoice[P]>
  }




  export type TenantInvoiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TenantInvoiceWhereInput
    orderBy?: TenantInvoiceOrderByWithAggregationInput | TenantInvoiceOrderByWithAggregationInput[]
    by: TenantInvoiceScalarFieldEnum[] | TenantInvoiceScalarFieldEnum
    having?: TenantInvoiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TenantInvoiceCountAggregateInputType | true
    _avg?: TenantInvoiceAvgAggregateInputType
    _sum?: TenantInvoiceSumAggregateInputType
    _min?: TenantInvoiceMinAggregateInputType
    _max?: TenantInvoiceMaxAggregateInputType
  }

  export type TenantInvoiceGroupByOutputType = {
    id: string
    tenantId: string
    periodStart: Date
    periodEnd: Date
    costUsd: number
    usageEvents: number
    totalCpuMs: number
    totalNetBytes: number
    createdAt: Date
    _count: TenantInvoiceCountAggregateOutputType | null
    _avg: TenantInvoiceAvgAggregateOutputType | null
    _sum: TenantInvoiceSumAggregateOutputType | null
    _min: TenantInvoiceMinAggregateOutputType | null
    _max: TenantInvoiceMaxAggregateOutputType | null
  }

  type GetTenantInvoiceGroupByPayload<T extends TenantInvoiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TenantInvoiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TenantInvoiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TenantInvoiceGroupByOutputType[P]>
            : GetScalarType<T[P], TenantInvoiceGroupByOutputType[P]>
        }
      >
    >


  export type TenantInvoiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    periodStart?: boolean
    periodEnd?: boolean
    costUsd?: boolean
    usageEvents?: boolean
    totalCpuMs?: boolean
    totalNetBytes?: boolean
    createdAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tenantInvoice"]>

  export type TenantInvoiceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    periodStart?: boolean
    periodEnd?: boolean
    costUsd?: boolean
    usageEvents?: boolean
    totalCpuMs?: boolean
    totalNetBytes?: boolean
    createdAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tenantInvoice"]>

  export type TenantInvoiceSelectScalar = {
    id?: boolean
    tenantId?: boolean
    periodStart?: boolean
    periodEnd?: boolean
    costUsd?: boolean
    usageEvents?: boolean
    totalCpuMs?: boolean
    totalNetBytes?: boolean
    createdAt?: boolean
  }

  export type TenantInvoiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type TenantInvoiceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $TenantInvoicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TenantInvoice"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string
      periodStart: Date
      periodEnd: Date
      costUsd: number
      usageEvents: number
      totalCpuMs: number
      totalNetBytes: number
      createdAt: Date
    }, ExtArgs["result"]["tenantInvoice"]>
    composites: {}
  }

  type TenantInvoiceGetPayload<S extends boolean | null | undefined | TenantInvoiceDefaultArgs> = $Result.GetResult<Prisma.$TenantInvoicePayload, S>

  type TenantInvoiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TenantInvoiceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TenantInvoiceCountAggregateInputType | true
    }

  export interface TenantInvoiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TenantInvoice'], meta: { name: 'TenantInvoice' } }
    /**
     * Find zero or one TenantInvoice that matches the filter.
     * @param {TenantInvoiceFindUniqueArgs} args - Arguments to find a TenantInvoice
     * @example
     * // Get one TenantInvoice
     * const tenantInvoice = await prisma.tenantInvoice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TenantInvoiceFindUniqueArgs>(args: SelectSubset<T, TenantInvoiceFindUniqueArgs<ExtArgs>>): Prisma__TenantInvoiceClient<$Result.GetResult<Prisma.$TenantInvoicePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TenantInvoice that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TenantInvoiceFindUniqueOrThrowArgs} args - Arguments to find a TenantInvoice
     * @example
     * // Get one TenantInvoice
     * const tenantInvoice = await prisma.tenantInvoice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TenantInvoiceFindUniqueOrThrowArgs>(args: SelectSubset<T, TenantInvoiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TenantInvoiceClient<$Result.GetResult<Prisma.$TenantInvoicePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TenantInvoice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantInvoiceFindFirstArgs} args - Arguments to find a TenantInvoice
     * @example
     * // Get one TenantInvoice
     * const tenantInvoice = await prisma.tenantInvoice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TenantInvoiceFindFirstArgs>(args?: SelectSubset<T, TenantInvoiceFindFirstArgs<ExtArgs>>): Prisma__TenantInvoiceClient<$Result.GetResult<Prisma.$TenantInvoicePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TenantInvoice that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantInvoiceFindFirstOrThrowArgs} args - Arguments to find a TenantInvoice
     * @example
     * // Get one TenantInvoice
     * const tenantInvoice = await prisma.tenantInvoice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TenantInvoiceFindFirstOrThrowArgs>(args?: SelectSubset<T, TenantInvoiceFindFirstOrThrowArgs<ExtArgs>>): Prisma__TenantInvoiceClient<$Result.GetResult<Prisma.$TenantInvoicePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TenantInvoices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantInvoiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TenantInvoices
     * const tenantInvoices = await prisma.tenantInvoice.findMany()
     * 
     * // Get first 10 TenantInvoices
     * const tenantInvoices = await prisma.tenantInvoice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tenantInvoiceWithIdOnly = await prisma.tenantInvoice.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TenantInvoiceFindManyArgs>(args?: SelectSubset<T, TenantInvoiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantInvoicePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TenantInvoice.
     * @param {TenantInvoiceCreateArgs} args - Arguments to create a TenantInvoice.
     * @example
     * // Create one TenantInvoice
     * const TenantInvoice = await prisma.tenantInvoice.create({
     *   data: {
     *     // ... data to create a TenantInvoice
     *   }
     * })
     * 
     */
    create<T extends TenantInvoiceCreateArgs>(args: SelectSubset<T, TenantInvoiceCreateArgs<ExtArgs>>): Prisma__TenantInvoiceClient<$Result.GetResult<Prisma.$TenantInvoicePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TenantInvoices.
     * @param {TenantInvoiceCreateManyArgs} args - Arguments to create many TenantInvoices.
     * @example
     * // Create many TenantInvoices
     * const tenantInvoice = await prisma.tenantInvoice.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TenantInvoiceCreateManyArgs>(args?: SelectSubset<T, TenantInvoiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TenantInvoices and returns the data saved in the database.
     * @param {TenantInvoiceCreateManyAndReturnArgs} args - Arguments to create many TenantInvoices.
     * @example
     * // Create many TenantInvoices
     * const tenantInvoice = await prisma.tenantInvoice.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TenantInvoices and only return the `id`
     * const tenantInvoiceWithIdOnly = await prisma.tenantInvoice.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TenantInvoiceCreateManyAndReturnArgs>(args?: SelectSubset<T, TenantInvoiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantInvoicePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TenantInvoice.
     * @param {TenantInvoiceDeleteArgs} args - Arguments to delete one TenantInvoice.
     * @example
     * // Delete one TenantInvoice
     * const TenantInvoice = await prisma.tenantInvoice.delete({
     *   where: {
     *     // ... filter to delete one TenantInvoice
     *   }
     * })
     * 
     */
    delete<T extends TenantInvoiceDeleteArgs>(args: SelectSubset<T, TenantInvoiceDeleteArgs<ExtArgs>>): Prisma__TenantInvoiceClient<$Result.GetResult<Prisma.$TenantInvoicePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TenantInvoice.
     * @param {TenantInvoiceUpdateArgs} args - Arguments to update one TenantInvoice.
     * @example
     * // Update one TenantInvoice
     * const tenantInvoice = await prisma.tenantInvoice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TenantInvoiceUpdateArgs>(args: SelectSubset<T, TenantInvoiceUpdateArgs<ExtArgs>>): Prisma__TenantInvoiceClient<$Result.GetResult<Prisma.$TenantInvoicePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TenantInvoices.
     * @param {TenantInvoiceDeleteManyArgs} args - Arguments to filter TenantInvoices to delete.
     * @example
     * // Delete a few TenantInvoices
     * const { count } = await prisma.tenantInvoice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TenantInvoiceDeleteManyArgs>(args?: SelectSubset<T, TenantInvoiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TenantInvoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantInvoiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TenantInvoices
     * const tenantInvoice = await prisma.tenantInvoice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TenantInvoiceUpdateManyArgs>(args: SelectSubset<T, TenantInvoiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TenantInvoice.
     * @param {TenantInvoiceUpsertArgs} args - Arguments to update or create a TenantInvoice.
     * @example
     * // Update or create a TenantInvoice
     * const tenantInvoice = await prisma.tenantInvoice.upsert({
     *   create: {
     *     // ... data to create a TenantInvoice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TenantInvoice we want to update
     *   }
     * })
     */
    upsert<T extends TenantInvoiceUpsertArgs>(args: SelectSubset<T, TenantInvoiceUpsertArgs<ExtArgs>>): Prisma__TenantInvoiceClient<$Result.GetResult<Prisma.$TenantInvoicePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TenantInvoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantInvoiceCountArgs} args - Arguments to filter TenantInvoices to count.
     * @example
     * // Count the number of TenantInvoices
     * const count = await prisma.tenantInvoice.count({
     *   where: {
     *     // ... the filter for the TenantInvoices we want to count
     *   }
     * })
    **/
    count<T extends TenantInvoiceCountArgs>(
      args?: Subset<T, TenantInvoiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TenantInvoiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TenantInvoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantInvoiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TenantInvoiceAggregateArgs>(args: Subset<T, TenantInvoiceAggregateArgs>): Prisma.PrismaPromise<GetTenantInvoiceAggregateType<T>>

    /**
     * Group by TenantInvoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantInvoiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TenantInvoiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TenantInvoiceGroupByArgs['orderBy'] }
        : { orderBy?: TenantInvoiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TenantInvoiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTenantInvoiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TenantInvoice model
   */
  readonly fields: TenantInvoiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TenantInvoice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TenantInvoiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TenantInvoice model
   */ 
  interface TenantInvoiceFieldRefs {
    readonly id: FieldRef<"TenantInvoice", 'String'>
    readonly tenantId: FieldRef<"TenantInvoice", 'String'>
    readonly periodStart: FieldRef<"TenantInvoice", 'DateTime'>
    readonly periodEnd: FieldRef<"TenantInvoice", 'DateTime'>
    readonly costUsd: FieldRef<"TenantInvoice", 'Float'>
    readonly usageEvents: FieldRef<"TenantInvoice", 'Int'>
    readonly totalCpuMs: FieldRef<"TenantInvoice", 'Int'>
    readonly totalNetBytes: FieldRef<"TenantInvoice", 'Int'>
    readonly createdAt: FieldRef<"TenantInvoice", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TenantInvoice findUnique
   */
  export type TenantInvoiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantInvoice
     */
    select?: TenantInvoiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInvoiceInclude<ExtArgs> | null
    /**
     * Filter, which TenantInvoice to fetch.
     */
    where: TenantInvoiceWhereUniqueInput
  }

  /**
   * TenantInvoice findUniqueOrThrow
   */
  export type TenantInvoiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantInvoice
     */
    select?: TenantInvoiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInvoiceInclude<ExtArgs> | null
    /**
     * Filter, which TenantInvoice to fetch.
     */
    where: TenantInvoiceWhereUniqueInput
  }

  /**
   * TenantInvoice findFirst
   */
  export type TenantInvoiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantInvoice
     */
    select?: TenantInvoiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInvoiceInclude<ExtArgs> | null
    /**
     * Filter, which TenantInvoice to fetch.
     */
    where?: TenantInvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TenantInvoices to fetch.
     */
    orderBy?: TenantInvoiceOrderByWithRelationInput | TenantInvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TenantInvoices.
     */
    cursor?: TenantInvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TenantInvoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TenantInvoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TenantInvoices.
     */
    distinct?: TenantInvoiceScalarFieldEnum | TenantInvoiceScalarFieldEnum[]
  }

  /**
   * TenantInvoice findFirstOrThrow
   */
  export type TenantInvoiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantInvoice
     */
    select?: TenantInvoiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInvoiceInclude<ExtArgs> | null
    /**
     * Filter, which TenantInvoice to fetch.
     */
    where?: TenantInvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TenantInvoices to fetch.
     */
    orderBy?: TenantInvoiceOrderByWithRelationInput | TenantInvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TenantInvoices.
     */
    cursor?: TenantInvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TenantInvoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TenantInvoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TenantInvoices.
     */
    distinct?: TenantInvoiceScalarFieldEnum | TenantInvoiceScalarFieldEnum[]
  }

  /**
   * TenantInvoice findMany
   */
  export type TenantInvoiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantInvoice
     */
    select?: TenantInvoiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInvoiceInclude<ExtArgs> | null
    /**
     * Filter, which TenantInvoices to fetch.
     */
    where?: TenantInvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TenantInvoices to fetch.
     */
    orderBy?: TenantInvoiceOrderByWithRelationInput | TenantInvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TenantInvoices.
     */
    cursor?: TenantInvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TenantInvoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TenantInvoices.
     */
    skip?: number
    distinct?: TenantInvoiceScalarFieldEnum | TenantInvoiceScalarFieldEnum[]
  }

  /**
   * TenantInvoice create
   */
  export type TenantInvoiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantInvoice
     */
    select?: TenantInvoiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInvoiceInclude<ExtArgs> | null
    /**
     * The data needed to create a TenantInvoice.
     */
    data: XOR<TenantInvoiceCreateInput, TenantInvoiceUncheckedCreateInput>
  }

  /**
   * TenantInvoice createMany
   */
  export type TenantInvoiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TenantInvoices.
     */
    data: TenantInvoiceCreateManyInput | TenantInvoiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TenantInvoice createManyAndReturn
   */
  export type TenantInvoiceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantInvoice
     */
    select?: TenantInvoiceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TenantInvoices.
     */
    data: TenantInvoiceCreateManyInput | TenantInvoiceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInvoiceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TenantInvoice update
   */
  export type TenantInvoiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantInvoice
     */
    select?: TenantInvoiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInvoiceInclude<ExtArgs> | null
    /**
     * The data needed to update a TenantInvoice.
     */
    data: XOR<TenantInvoiceUpdateInput, TenantInvoiceUncheckedUpdateInput>
    /**
     * Choose, which TenantInvoice to update.
     */
    where: TenantInvoiceWhereUniqueInput
  }

  /**
   * TenantInvoice updateMany
   */
  export type TenantInvoiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TenantInvoices.
     */
    data: XOR<TenantInvoiceUpdateManyMutationInput, TenantInvoiceUncheckedUpdateManyInput>
    /**
     * Filter which TenantInvoices to update
     */
    where?: TenantInvoiceWhereInput
  }

  /**
   * TenantInvoice upsert
   */
  export type TenantInvoiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantInvoice
     */
    select?: TenantInvoiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInvoiceInclude<ExtArgs> | null
    /**
     * The filter to search for the TenantInvoice to update in case it exists.
     */
    where: TenantInvoiceWhereUniqueInput
    /**
     * In case the TenantInvoice found by the `where` argument doesn't exist, create a new TenantInvoice with this data.
     */
    create: XOR<TenantInvoiceCreateInput, TenantInvoiceUncheckedCreateInput>
    /**
     * In case the TenantInvoice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TenantInvoiceUpdateInput, TenantInvoiceUncheckedUpdateInput>
  }

  /**
   * TenantInvoice delete
   */
  export type TenantInvoiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantInvoice
     */
    select?: TenantInvoiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInvoiceInclude<ExtArgs> | null
    /**
     * Filter which TenantInvoice to delete.
     */
    where: TenantInvoiceWhereUniqueInput
  }

  /**
   * TenantInvoice deleteMany
   */
  export type TenantInvoiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TenantInvoices to delete
     */
    where?: TenantInvoiceWhereInput
  }

  /**
   * TenantInvoice without action
   */
  export type TenantInvoiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantInvoice
     */
    select?: TenantInvoiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInvoiceInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TenantScalarFieldEnum: {
    id: 'id',
    name: 'name',
    auth0Id: 'auth0Id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TenantScalarFieldEnum = (typeof TenantScalarFieldEnum)[keyof typeof TenantScalarFieldEnum]


  export const CapsuleScalarFieldEnum: {
    id: 'id',
    hash: 'hash',
    specSig: 'specSig',
    riskScore: 'riskScore',
    reason: 'reason',
    tenantId: 'tenantId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CapsuleScalarFieldEnum = (typeof CapsuleScalarFieldEnum)[keyof typeof CapsuleScalarFieldEnum]


  export const PremiumQuoteScalarFieldEnum: {
    id: 'id',
    capsuleHash: 'capsuleHash',
    riskScore: 'riskScore',
    annualUsd: 'annualUsd',
    tenantId: 'tenantId',
    createdAt: 'createdAt'
  };

  export type PremiumQuoteScalarFieldEnum = (typeof PremiumQuoteScalarFieldEnum)[keyof typeof PremiumQuoteScalarFieldEnum]


  export const UsageEventScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    cpuMs: 'cpuMs',
    netBytes: 'netBytes',
    ts: 'ts',
    createdAt: 'createdAt'
  };

  export type UsageEventScalarFieldEnum = (typeof UsageEventScalarFieldEnum)[keyof typeof UsageEventScalarFieldEnum]


  export const TenantInvoiceScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    periodStart: 'periodStart',
    periodEnd: 'periodEnd',
    costUsd: 'costUsd',
    usageEvents: 'usageEvents',
    totalCpuMs: 'totalCpuMs',
    totalNetBytes: 'totalNetBytes',
    createdAt: 'createdAt'
  };

  export type TenantInvoiceScalarFieldEnum = (typeof TenantInvoiceScalarFieldEnum)[keyof typeof TenantInvoiceScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type TenantWhereInput = {
    AND?: TenantWhereInput | TenantWhereInput[]
    OR?: TenantWhereInput[]
    NOT?: TenantWhereInput | TenantWhereInput[]
    id?: StringFilter<"Tenant"> | string
    name?: StringFilter<"Tenant"> | string
    auth0Id?: StringFilter<"Tenant"> | string
    createdAt?: DateTimeFilter<"Tenant"> | Date | string
    updatedAt?: DateTimeFilter<"Tenant"> | Date | string
    capsules?: CapsuleListRelationFilter
    premiumQuotes?: PremiumQuoteListRelationFilter
    usageEvents?: UsageEventListRelationFilter
    invoices?: TenantInvoiceListRelationFilter
  }

  export type TenantOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    auth0Id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    capsules?: CapsuleOrderByRelationAggregateInput
    premiumQuotes?: PremiumQuoteOrderByRelationAggregateInput
    usageEvents?: UsageEventOrderByRelationAggregateInput
    invoices?: TenantInvoiceOrderByRelationAggregateInput
  }

  export type TenantWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    auth0Id?: string
    AND?: TenantWhereInput | TenantWhereInput[]
    OR?: TenantWhereInput[]
    NOT?: TenantWhereInput | TenantWhereInput[]
    createdAt?: DateTimeFilter<"Tenant"> | Date | string
    updatedAt?: DateTimeFilter<"Tenant"> | Date | string
    capsules?: CapsuleListRelationFilter
    premiumQuotes?: PremiumQuoteListRelationFilter
    usageEvents?: UsageEventListRelationFilter
    invoices?: TenantInvoiceListRelationFilter
  }, "id" | "name" | "auth0Id">

  export type TenantOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    auth0Id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TenantCountOrderByAggregateInput
    _max?: TenantMaxOrderByAggregateInput
    _min?: TenantMinOrderByAggregateInput
  }

  export type TenantScalarWhereWithAggregatesInput = {
    AND?: TenantScalarWhereWithAggregatesInput | TenantScalarWhereWithAggregatesInput[]
    OR?: TenantScalarWhereWithAggregatesInput[]
    NOT?: TenantScalarWhereWithAggregatesInput | TenantScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Tenant"> | string
    name?: StringWithAggregatesFilter<"Tenant"> | string
    auth0Id?: StringWithAggregatesFilter<"Tenant"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Tenant"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Tenant"> | Date | string
  }

  export type CapsuleWhereInput = {
    AND?: CapsuleWhereInput | CapsuleWhereInput[]
    OR?: CapsuleWhereInput[]
    NOT?: CapsuleWhereInput | CapsuleWhereInput[]
    id?: StringFilter<"Capsule"> | string
    hash?: StringFilter<"Capsule"> | string
    specSig?: StringFilter<"Capsule"> | string
    riskScore?: FloatFilter<"Capsule"> | number
    reason?: StringNullableFilter<"Capsule"> | string | null
    tenantId?: StringFilter<"Capsule"> | string
    createdAt?: DateTimeFilter<"Capsule"> | Date | string
    updatedAt?: DateTimeFilter<"Capsule"> | Date | string
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
    premiumQuotes?: PremiumQuoteListRelationFilter
  }

  export type CapsuleOrderByWithRelationInput = {
    id?: SortOrder
    hash?: SortOrder
    specSig?: SortOrder
    riskScore?: SortOrder
    reason?: SortOrderInput | SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenant?: TenantOrderByWithRelationInput
    premiumQuotes?: PremiumQuoteOrderByRelationAggregateInput
  }

  export type CapsuleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    hash?: string
    AND?: CapsuleWhereInput | CapsuleWhereInput[]
    OR?: CapsuleWhereInput[]
    NOT?: CapsuleWhereInput | CapsuleWhereInput[]
    specSig?: StringFilter<"Capsule"> | string
    riskScore?: FloatFilter<"Capsule"> | number
    reason?: StringNullableFilter<"Capsule"> | string | null
    tenantId?: StringFilter<"Capsule"> | string
    createdAt?: DateTimeFilter<"Capsule"> | Date | string
    updatedAt?: DateTimeFilter<"Capsule"> | Date | string
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
    premiumQuotes?: PremiumQuoteListRelationFilter
  }, "id" | "hash">

  export type CapsuleOrderByWithAggregationInput = {
    id?: SortOrder
    hash?: SortOrder
    specSig?: SortOrder
    riskScore?: SortOrder
    reason?: SortOrderInput | SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CapsuleCountOrderByAggregateInput
    _avg?: CapsuleAvgOrderByAggregateInput
    _max?: CapsuleMaxOrderByAggregateInput
    _min?: CapsuleMinOrderByAggregateInput
    _sum?: CapsuleSumOrderByAggregateInput
  }

  export type CapsuleScalarWhereWithAggregatesInput = {
    AND?: CapsuleScalarWhereWithAggregatesInput | CapsuleScalarWhereWithAggregatesInput[]
    OR?: CapsuleScalarWhereWithAggregatesInput[]
    NOT?: CapsuleScalarWhereWithAggregatesInput | CapsuleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Capsule"> | string
    hash?: StringWithAggregatesFilter<"Capsule"> | string
    specSig?: StringWithAggregatesFilter<"Capsule"> | string
    riskScore?: FloatWithAggregatesFilter<"Capsule"> | number
    reason?: StringNullableWithAggregatesFilter<"Capsule"> | string | null
    tenantId?: StringWithAggregatesFilter<"Capsule"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Capsule"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Capsule"> | Date | string
  }

  export type PremiumQuoteWhereInput = {
    AND?: PremiumQuoteWhereInput | PremiumQuoteWhereInput[]
    OR?: PremiumQuoteWhereInput[]
    NOT?: PremiumQuoteWhereInput | PremiumQuoteWhereInput[]
    id?: StringFilter<"PremiumQuote"> | string
    capsuleHash?: StringFilter<"PremiumQuote"> | string
    riskScore?: FloatFilter<"PremiumQuote"> | number
    annualUsd?: FloatFilter<"PremiumQuote"> | number
    tenantId?: StringFilter<"PremiumQuote"> | string
    createdAt?: DateTimeFilter<"PremiumQuote"> | Date | string
    capsule?: XOR<CapsuleRelationFilter, CapsuleWhereInput>
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
  }

  export type PremiumQuoteOrderByWithRelationInput = {
    id?: SortOrder
    capsuleHash?: SortOrder
    riskScore?: SortOrder
    annualUsd?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    capsule?: CapsuleOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
  }

  export type PremiumQuoteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PremiumQuoteWhereInput | PremiumQuoteWhereInput[]
    OR?: PremiumQuoteWhereInput[]
    NOT?: PremiumQuoteWhereInput | PremiumQuoteWhereInput[]
    capsuleHash?: StringFilter<"PremiumQuote"> | string
    riskScore?: FloatFilter<"PremiumQuote"> | number
    annualUsd?: FloatFilter<"PremiumQuote"> | number
    tenantId?: StringFilter<"PremiumQuote"> | string
    createdAt?: DateTimeFilter<"PremiumQuote"> | Date | string
    capsule?: XOR<CapsuleRelationFilter, CapsuleWhereInput>
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
  }, "id">

  export type PremiumQuoteOrderByWithAggregationInput = {
    id?: SortOrder
    capsuleHash?: SortOrder
    riskScore?: SortOrder
    annualUsd?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    _count?: PremiumQuoteCountOrderByAggregateInput
    _avg?: PremiumQuoteAvgOrderByAggregateInput
    _max?: PremiumQuoteMaxOrderByAggregateInput
    _min?: PremiumQuoteMinOrderByAggregateInput
    _sum?: PremiumQuoteSumOrderByAggregateInput
  }

  export type PremiumQuoteScalarWhereWithAggregatesInput = {
    AND?: PremiumQuoteScalarWhereWithAggregatesInput | PremiumQuoteScalarWhereWithAggregatesInput[]
    OR?: PremiumQuoteScalarWhereWithAggregatesInput[]
    NOT?: PremiumQuoteScalarWhereWithAggregatesInput | PremiumQuoteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PremiumQuote"> | string
    capsuleHash?: StringWithAggregatesFilter<"PremiumQuote"> | string
    riskScore?: FloatWithAggregatesFilter<"PremiumQuote"> | number
    annualUsd?: FloatWithAggregatesFilter<"PremiumQuote"> | number
    tenantId?: StringWithAggregatesFilter<"PremiumQuote"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PremiumQuote"> | Date | string
  }

  export type UsageEventWhereInput = {
    AND?: UsageEventWhereInput | UsageEventWhereInput[]
    OR?: UsageEventWhereInput[]
    NOT?: UsageEventWhereInput | UsageEventWhereInput[]
    id?: StringFilter<"UsageEvent"> | string
    tenantId?: StringFilter<"UsageEvent"> | string
    cpuMs?: IntFilter<"UsageEvent"> | number
    netBytes?: IntFilter<"UsageEvent"> | number
    ts?: DateTimeFilter<"UsageEvent"> | Date | string
    createdAt?: DateTimeFilter<"UsageEvent"> | Date | string
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
  }

  export type UsageEventOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    cpuMs?: SortOrder
    netBytes?: SortOrder
    ts?: SortOrder
    createdAt?: SortOrder
    tenant?: TenantOrderByWithRelationInput
  }

  export type UsageEventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UsageEventWhereInput | UsageEventWhereInput[]
    OR?: UsageEventWhereInput[]
    NOT?: UsageEventWhereInput | UsageEventWhereInput[]
    tenantId?: StringFilter<"UsageEvent"> | string
    cpuMs?: IntFilter<"UsageEvent"> | number
    netBytes?: IntFilter<"UsageEvent"> | number
    ts?: DateTimeFilter<"UsageEvent"> | Date | string
    createdAt?: DateTimeFilter<"UsageEvent"> | Date | string
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
  }, "id">

  export type UsageEventOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    cpuMs?: SortOrder
    netBytes?: SortOrder
    ts?: SortOrder
    createdAt?: SortOrder
    _count?: UsageEventCountOrderByAggregateInput
    _avg?: UsageEventAvgOrderByAggregateInput
    _max?: UsageEventMaxOrderByAggregateInput
    _min?: UsageEventMinOrderByAggregateInput
    _sum?: UsageEventSumOrderByAggregateInput
  }

  export type UsageEventScalarWhereWithAggregatesInput = {
    AND?: UsageEventScalarWhereWithAggregatesInput | UsageEventScalarWhereWithAggregatesInput[]
    OR?: UsageEventScalarWhereWithAggregatesInput[]
    NOT?: UsageEventScalarWhereWithAggregatesInput | UsageEventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UsageEvent"> | string
    tenantId?: StringWithAggregatesFilter<"UsageEvent"> | string
    cpuMs?: IntWithAggregatesFilter<"UsageEvent"> | number
    netBytes?: IntWithAggregatesFilter<"UsageEvent"> | number
    ts?: DateTimeWithAggregatesFilter<"UsageEvent"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"UsageEvent"> | Date | string
  }

  export type TenantInvoiceWhereInput = {
    AND?: TenantInvoiceWhereInput | TenantInvoiceWhereInput[]
    OR?: TenantInvoiceWhereInput[]
    NOT?: TenantInvoiceWhereInput | TenantInvoiceWhereInput[]
    id?: StringFilter<"TenantInvoice"> | string
    tenantId?: StringFilter<"TenantInvoice"> | string
    periodStart?: DateTimeFilter<"TenantInvoice"> | Date | string
    periodEnd?: DateTimeFilter<"TenantInvoice"> | Date | string
    costUsd?: FloatFilter<"TenantInvoice"> | number
    usageEvents?: IntFilter<"TenantInvoice"> | number
    totalCpuMs?: IntFilter<"TenantInvoice"> | number
    totalNetBytes?: IntFilter<"TenantInvoice"> | number
    createdAt?: DateTimeFilter<"TenantInvoice"> | Date | string
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
  }

  export type TenantInvoiceOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    costUsd?: SortOrder
    usageEvents?: SortOrder
    totalCpuMs?: SortOrder
    totalNetBytes?: SortOrder
    createdAt?: SortOrder
    tenant?: TenantOrderByWithRelationInput
  }

  export type TenantInvoiceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    tenantId_periodStart?: TenantInvoiceTenantIdPeriodStartCompoundUniqueInput
    AND?: TenantInvoiceWhereInput | TenantInvoiceWhereInput[]
    OR?: TenantInvoiceWhereInput[]
    NOT?: TenantInvoiceWhereInput | TenantInvoiceWhereInput[]
    tenantId?: StringFilter<"TenantInvoice"> | string
    periodStart?: DateTimeFilter<"TenantInvoice"> | Date | string
    periodEnd?: DateTimeFilter<"TenantInvoice"> | Date | string
    costUsd?: FloatFilter<"TenantInvoice"> | number
    usageEvents?: IntFilter<"TenantInvoice"> | number
    totalCpuMs?: IntFilter<"TenantInvoice"> | number
    totalNetBytes?: IntFilter<"TenantInvoice"> | number
    createdAt?: DateTimeFilter<"TenantInvoice"> | Date | string
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
  }, "id" | "tenantId_periodStart">

  export type TenantInvoiceOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    costUsd?: SortOrder
    usageEvents?: SortOrder
    totalCpuMs?: SortOrder
    totalNetBytes?: SortOrder
    createdAt?: SortOrder
    _count?: TenantInvoiceCountOrderByAggregateInput
    _avg?: TenantInvoiceAvgOrderByAggregateInput
    _max?: TenantInvoiceMaxOrderByAggregateInput
    _min?: TenantInvoiceMinOrderByAggregateInput
    _sum?: TenantInvoiceSumOrderByAggregateInput
  }

  export type TenantInvoiceScalarWhereWithAggregatesInput = {
    AND?: TenantInvoiceScalarWhereWithAggregatesInput | TenantInvoiceScalarWhereWithAggregatesInput[]
    OR?: TenantInvoiceScalarWhereWithAggregatesInput[]
    NOT?: TenantInvoiceScalarWhereWithAggregatesInput | TenantInvoiceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TenantInvoice"> | string
    tenantId?: StringWithAggregatesFilter<"TenantInvoice"> | string
    periodStart?: DateTimeWithAggregatesFilter<"TenantInvoice"> | Date | string
    periodEnd?: DateTimeWithAggregatesFilter<"TenantInvoice"> | Date | string
    costUsd?: FloatWithAggregatesFilter<"TenantInvoice"> | number
    usageEvents?: IntWithAggregatesFilter<"TenantInvoice"> | number
    totalCpuMs?: IntWithAggregatesFilter<"TenantInvoice"> | number
    totalNetBytes?: IntWithAggregatesFilter<"TenantInvoice"> | number
    createdAt?: DateTimeWithAggregatesFilter<"TenantInvoice"> | Date | string
  }

  export type TenantCreateInput = {
    id?: string
    name: string
    auth0Id: string
    createdAt?: Date | string
    updatedAt?: Date | string
    capsules?: CapsuleCreateNestedManyWithoutTenantInput
    premiumQuotes?: PremiumQuoteCreateNestedManyWithoutTenantInput
    usageEvents?: UsageEventCreateNestedManyWithoutTenantInput
    invoices?: TenantInvoiceCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateInput = {
    id?: string
    name: string
    auth0Id: string
    createdAt?: Date | string
    updatedAt?: Date | string
    capsules?: CapsuleUncheckedCreateNestedManyWithoutTenantInput
    premiumQuotes?: PremiumQuoteUncheckedCreateNestedManyWithoutTenantInput
    usageEvents?: UsageEventUncheckedCreateNestedManyWithoutTenantInput
    invoices?: TenantInvoiceUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    auth0Id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    capsules?: CapsuleUpdateManyWithoutTenantNestedInput
    premiumQuotes?: PremiumQuoteUpdateManyWithoutTenantNestedInput
    usageEvents?: UsageEventUpdateManyWithoutTenantNestedInput
    invoices?: TenantInvoiceUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    auth0Id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    capsules?: CapsuleUncheckedUpdateManyWithoutTenantNestedInput
    premiumQuotes?: PremiumQuoteUncheckedUpdateManyWithoutTenantNestedInput
    usageEvents?: UsageEventUncheckedUpdateManyWithoutTenantNestedInput
    invoices?: TenantInvoiceUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantCreateManyInput = {
    id?: string
    name: string
    auth0Id: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TenantUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    auth0Id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    auth0Id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CapsuleCreateInput = {
    id?: string
    hash: string
    specSig: string
    riskScore?: number
    reason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutCapsulesInput
    premiumQuotes?: PremiumQuoteCreateNestedManyWithoutCapsuleInput
  }

  export type CapsuleUncheckedCreateInput = {
    id?: string
    hash: string
    specSig: string
    riskScore?: number
    reason?: string | null
    tenantId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    premiumQuotes?: PremiumQuoteUncheckedCreateNestedManyWithoutCapsuleInput
  }

  export type CapsuleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    specSig?: StringFieldUpdateOperationsInput | string
    riskScore?: FloatFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutCapsulesNestedInput
    premiumQuotes?: PremiumQuoteUpdateManyWithoutCapsuleNestedInput
  }

  export type CapsuleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    specSig?: StringFieldUpdateOperationsInput | string
    riskScore?: FloatFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    premiumQuotes?: PremiumQuoteUncheckedUpdateManyWithoutCapsuleNestedInput
  }

  export type CapsuleCreateManyInput = {
    id?: string
    hash: string
    specSig: string
    riskScore?: number
    reason?: string | null
    tenantId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CapsuleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    specSig?: StringFieldUpdateOperationsInput | string
    riskScore?: FloatFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CapsuleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    specSig?: StringFieldUpdateOperationsInput | string
    riskScore?: FloatFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PremiumQuoteCreateInput = {
    id?: string
    riskScore: number
    annualUsd: number
    createdAt?: Date | string
    capsule: CapsuleCreateNestedOneWithoutPremiumQuotesInput
    tenant: TenantCreateNestedOneWithoutPremiumQuotesInput
  }

  export type PremiumQuoteUncheckedCreateInput = {
    id?: string
    capsuleHash: string
    riskScore: number
    annualUsd: number
    tenantId: string
    createdAt?: Date | string
  }

  export type PremiumQuoteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    riskScore?: FloatFieldUpdateOperationsInput | number
    annualUsd?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    capsule?: CapsuleUpdateOneRequiredWithoutPremiumQuotesNestedInput
    tenant?: TenantUpdateOneRequiredWithoutPremiumQuotesNestedInput
  }

  export type PremiumQuoteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    capsuleHash?: StringFieldUpdateOperationsInput | string
    riskScore?: FloatFieldUpdateOperationsInput | number
    annualUsd?: FloatFieldUpdateOperationsInput | number
    tenantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PremiumQuoteCreateManyInput = {
    id?: string
    capsuleHash: string
    riskScore: number
    annualUsd: number
    tenantId: string
    createdAt?: Date | string
  }

  export type PremiumQuoteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    riskScore?: FloatFieldUpdateOperationsInput | number
    annualUsd?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PremiumQuoteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    capsuleHash?: StringFieldUpdateOperationsInput | string
    riskScore?: FloatFieldUpdateOperationsInput | number
    annualUsd?: FloatFieldUpdateOperationsInput | number
    tenantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageEventCreateInput = {
    id?: string
    cpuMs: number
    netBytes: number
    ts?: Date | string
    createdAt?: Date | string
    tenant: TenantCreateNestedOneWithoutUsageEventsInput
  }

  export type UsageEventUncheckedCreateInput = {
    id?: string
    tenantId: string
    cpuMs: number
    netBytes: number
    ts?: Date | string
    createdAt?: Date | string
  }

  export type UsageEventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    cpuMs?: IntFieldUpdateOperationsInput | number
    netBytes?: IntFieldUpdateOperationsInput | number
    ts?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutUsageEventsNestedInput
  }

  export type UsageEventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    cpuMs?: IntFieldUpdateOperationsInput | number
    netBytes?: IntFieldUpdateOperationsInput | number
    ts?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageEventCreateManyInput = {
    id?: string
    tenantId: string
    cpuMs: number
    netBytes: number
    ts?: Date | string
    createdAt?: Date | string
  }

  export type UsageEventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    cpuMs?: IntFieldUpdateOperationsInput | number
    netBytes?: IntFieldUpdateOperationsInput | number
    ts?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageEventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    cpuMs?: IntFieldUpdateOperationsInput | number
    netBytes?: IntFieldUpdateOperationsInput | number
    ts?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantInvoiceCreateInput = {
    id?: string
    periodStart: Date | string
    periodEnd: Date | string
    costUsd: number
    usageEvents: number
    totalCpuMs: number
    totalNetBytes: number
    createdAt?: Date | string
    tenant: TenantCreateNestedOneWithoutInvoicesInput
  }

  export type TenantInvoiceUncheckedCreateInput = {
    id?: string
    tenantId: string
    periodStart: Date | string
    periodEnd: Date | string
    costUsd: number
    usageEvents: number
    totalCpuMs: number
    totalNetBytes: number
    createdAt?: Date | string
  }

  export type TenantInvoiceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    costUsd?: FloatFieldUpdateOperationsInput | number
    usageEvents?: IntFieldUpdateOperationsInput | number
    totalCpuMs?: IntFieldUpdateOperationsInput | number
    totalNetBytes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutInvoicesNestedInput
  }

  export type TenantInvoiceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    costUsd?: FloatFieldUpdateOperationsInput | number
    usageEvents?: IntFieldUpdateOperationsInput | number
    totalCpuMs?: IntFieldUpdateOperationsInput | number
    totalNetBytes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantInvoiceCreateManyInput = {
    id?: string
    tenantId: string
    periodStart: Date | string
    periodEnd: Date | string
    costUsd: number
    usageEvents: number
    totalCpuMs: number
    totalNetBytes: number
    createdAt?: Date | string
  }

  export type TenantInvoiceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    costUsd?: FloatFieldUpdateOperationsInput | number
    usageEvents?: IntFieldUpdateOperationsInput | number
    totalCpuMs?: IntFieldUpdateOperationsInput | number
    totalNetBytes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantInvoiceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    costUsd?: FloatFieldUpdateOperationsInput | number
    usageEvents?: IntFieldUpdateOperationsInput | number
    totalCpuMs?: IntFieldUpdateOperationsInput | number
    totalNetBytes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CapsuleListRelationFilter = {
    every?: CapsuleWhereInput
    some?: CapsuleWhereInput
    none?: CapsuleWhereInput
  }

  export type PremiumQuoteListRelationFilter = {
    every?: PremiumQuoteWhereInput
    some?: PremiumQuoteWhereInput
    none?: PremiumQuoteWhereInput
  }

  export type UsageEventListRelationFilter = {
    every?: UsageEventWhereInput
    some?: UsageEventWhereInput
    none?: UsageEventWhereInput
  }

  export type TenantInvoiceListRelationFilter = {
    every?: TenantInvoiceWhereInput
    some?: TenantInvoiceWhereInput
    none?: TenantInvoiceWhereInput
  }

  export type CapsuleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PremiumQuoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsageEventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TenantInvoiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TenantCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    auth0Id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TenantMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    auth0Id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TenantMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    auth0Id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type TenantRelationFilter = {
    is?: TenantWhereInput
    isNot?: TenantWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CapsuleCountOrderByAggregateInput = {
    id?: SortOrder
    hash?: SortOrder
    specSig?: SortOrder
    riskScore?: SortOrder
    reason?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CapsuleAvgOrderByAggregateInput = {
    riskScore?: SortOrder
  }

  export type CapsuleMaxOrderByAggregateInput = {
    id?: SortOrder
    hash?: SortOrder
    specSig?: SortOrder
    riskScore?: SortOrder
    reason?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CapsuleMinOrderByAggregateInput = {
    id?: SortOrder
    hash?: SortOrder
    specSig?: SortOrder
    riskScore?: SortOrder
    reason?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CapsuleSumOrderByAggregateInput = {
    riskScore?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type CapsuleRelationFilter = {
    is?: CapsuleWhereInput
    isNot?: CapsuleWhereInput
  }

  export type PremiumQuoteCountOrderByAggregateInput = {
    id?: SortOrder
    capsuleHash?: SortOrder
    riskScore?: SortOrder
    annualUsd?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
  }

  export type PremiumQuoteAvgOrderByAggregateInput = {
    riskScore?: SortOrder
    annualUsd?: SortOrder
  }

  export type PremiumQuoteMaxOrderByAggregateInput = {
    id?: SortOrder
    capsuleHash?: SortOrder
    riskScore?: SortOrder
    annualUsd?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
  }

  export type PremiumQuoteMinOrderByAggregateInput = {
    id?: SortOrder
    capsuleHash?: SortOrder
    riskScore?: SortOrder
    annualUsd?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
  }

  export type PremiumQuoteSumOrderByAggregateInput = {
    riskScore?: SortOrder
    annualUsd?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type UsageEventCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    cpuMs?: SortOrder
    netBytes?: SortOrder
    ts?: SortOrder
    createdAt?: SortOrder
  }

  export type UsageEventAvgOrderByAggregateInput = {
    cpuMs?: SortOrder
    netBytes?: SortOrder
  }

  export type UsageEventMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    cpuMs?: SortOrder
    netBytes?: SortOrder
    ts?: SortOrder
    createdAt?: SortOrder
  }

  export type UsageEventMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    cpuMs?: SortOrder
    netBytes?: SortOrder
    ts?: SortOrder
    createdAt?: SortOrder
  }

  export type UsageEventSumOrderByAggregateInput = {
    cpuMs?: SortOrder
    netBytes?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type TenantInvoiceTenantIdPeriodStartCompoundUniqueInput = {
    tenantId: string
    periodStart: Date | string
  }

  export type TenantInvoiceCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    costUsd?: SortOrder
    usageEvents?: SortOrder
    totalCpuMs?: SortOrder
    totalNetBytes?: SortOrder
    createdAt?: SortOrder
  }

  export type TenantInvoiceAvgOrderByAggregateInput = {
    costUsd?: SortOrder
    usageEvents?: SortOrder
    totalCpuMs?: SortOrder
    totalNetBytes?: SortOrder
  }

  export type TenantInvoiceMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    costUsd?: SortOrder
    usageEvents?: SortOrder
    totalCpuMs?: SortOrder
    totalNetBytes?: SortOrder
    createdAt?: SortOrder
  }

  export type TenantInvoiceMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    costUsd?: SortOrder
    usageEvents?: SortOrder
    totalCpuMs?: SortOrder
    totalNetBytes?: SortOrder
    createdAt?: SortOrder
  }

  export type TenantInvoiceSumOrderByAggregateInput = {
    costUsd?: SortOrder
    usageEvents?: SortOrder
    totalCpuMs?: SortOrder
    totalNetBytes?: SortOrder
  }

  export type CapsuleCreateNestedManyWithoutTenantInput = {
    create?: XOR<CapsuleCreateWithoutTenantInput, CapsuleUncheckedCreateWithoutTenantInput> | CapsuleCreateWithoutTenantInput[] | CapsuleUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CapsuleCreateOrConnectWithoutTenantInput | CapsuleCreateOrConnectWithoutTenantInput[]
    createMany?: CapsuleCreateManyTenantInputEnvelope
    connect?: CapsuleWhereUniqueInput | CapsuleWhereUniqueInput[]
  }

  export type PremiumQuoteCreateNestedManyWithoutTenantInput = {
    create?: XOR<PremiumQuoteCreateWithoutTenantInput, PremiumQuoteUncheckedCreateWithoutTenantInput> | PremiumQuoteCreateWithoutTenantInput[] | PremiumQuoteUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PremiumQuoteCreateOrConnectWithoutTenantInput | PremiumQuoteCreateOrConnectWithoutTenantInput[]
    createMany?: PremiumQuoteCreateManyTenantInputEnvelope
    connect?: PremiumQuoteWhereUniqueInput | PremiumQuoteWhereUniqueInput[]
  }

  export type UsageEventCreateNestedManyWithoutTenantInput = {
    create?: XOR<UsageEventCreateWithoutTenantInput, UsageEventUncheckedCreateWithoutTenantInput> | UsageEventCreateWithoutTenantInput[] | UsageEventUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: UsageEventCreateOrConnectWithoutTenantInput | UsageEventCreateOrConnectWithoutTenantInput[]
    createMany?: UsageEventCreateManyTenantInputEnvelope
    connect?: UsageEventWhereUniqueInput | UsageEventWhereUniqueInput[]
  }

  export type TenantInvoiceCreateNestedManyWithoutTenantInput = {
    create?: XOR<TenantInvoiceCreateWithoutTenantInput, TenantInvoiceUncheckedCreateWithoutTenantInput> | TenantInvoiceCreateWithoutTenantInput[] | TenantInvoiceUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: TenantInvoiceCreateOrConnectWithoutTenantInput | TenantInvoiceCreateOrConnectWithoutTenantInput[]
    createMany?: TenantInvoiceCreateManyTenantInputEnvelope
    connect?: TenantInvoiceWhereUniqueInput | TenantInvoiceWhereUniqueInput[]
  }

  export type CapsuleUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<CapsuleCreateWithoutTenantInput, CapsuleUncheckedCreateWithoutTenantInput> | CapsuleCreateWithoutTenantInput[] | CapsuleUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CapsuleCreateOrConnectWithoutTenantInput | CapsuleCreateOrConnectWithoutTenantInput[]
    createMany?: CapsuleCreateManyTenantInputEnvelope
    connect?: CapsuleWhereUniqueInput | CapsuleWhereUniqueInput[]
  }

  export type PremiumQuoteUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<PremiumQuoteCreateWithoutTenantInput, PremiumQuoteUncheckedCreateWithoutTenantInput> | PremiumQuoteCreateWithoutTenantInput[] | PremiumQuoteUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PremiumQuoteCreateOrConnectWithoutTenantInput | PremiumQuoteCreateOrConnectWithoutTenantInput[]
    createMany?: PremiumQuoteCreateManyTenantInputEnvelope
    connect?: PremiumQuoteWhereUniqueInput | PremiumQuoteWhereUniqueInput[]
  }

  export type UsageEventUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<UsageEventCreateWithoutTenantInput, UsageEventUncheckedCreateWithoutTenantInput> | UsageEventCreateWithoutTenantInput[] | UsageEventUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: UsageEventCreateOrConnectWithoutTenantInput | UsageEventCreateOrConnectWithoutTenantInput[]
    createMany?: UsageEventCreateManyTenantInputEnvelope
    connect?: UsageEventWhereUniqueInput | UsageEventWhereUniqueInput[]
  }

  export type TenantInvoiceUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<TenantInvoiceCreateWithoutTenantInput, TenantInvoiceUncheckedCreateWithoutTenantInput> | TenantInvoiceCreateWithoutTenantInput[] | TenantInvoiceUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: TenantInvoiceCreateOrConnectWithoutTenantInput | TenantInvoiceCreateOrConnectWithoutTenantInput[]
    createMany?: TenantInvoiceCreateManyTenantInputEnvelope
    connect?: TenantInvoiceWhereUniqueInput | TenantInvoiceWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CapsuleUpdateManyWithoutTenantNestedInput = {
    create?: XOR<CapsuleCreateWithoutTenantInput, CapsuleUncheckedCreateWithoutTenantInput> | CapsuleCreateWithoutTenantInput[] | CapsuleUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CapsuleCreateOrConnectWithoutTenantInput | CapsuleCreateOrConnectWithoutTenantInput[]
    upsert?: CapsuleUpsertWithWhereUniqueWithoutTenantInput | CapsuleUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: CapsuleCreateManyTenantInputEnvelope
    set?: CapsuleWhereUniqueInput | CapsuleWhereUniqueInput[]
    disconnect?: CapsuleWhereUniqueInput | CapsuleWhereUniqueInput[]
    delete?: CapsuleWhereUniqueInput | CapsuleWhereUniqueInput[]
    connect?: CapsuleWhereUniqueInput | CapsuleWhereUniqueInput[]
    update?: CapsuleUpdateWithWhereUniqueWithoutTenantInput | CapsuleUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: CapsuleUpdateManyWithWhereWithoutTenantInput | CapsuleUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: CapsuleScalarWhereInput | CapsuleScalarWhereInput[]
  }

  export type PremiumQuoteUpdateManyWithoutTenantNestedInput = {
    create?: XOR<PremiumQuoteCreateWithoutTenantInput, PremiumQuoteUncheckedCreateWithoutTenantInput> | PremiumQuoteCreateWithoutTenantInput[] | PremiumQuoteUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PremiumQuoteCreateOrConnectWithoutTenantInput | PremiumQuoteCreateOrConnectWithoutTenantInput[]
    upsert?: PremiumQuoteUpsertWithWhereUniqueWithoutTenantInput | PremiumQuoteUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: PremiumQuoteCreateManyTenantInputEnvelope
    set?: PremiumQuoteWhereUniqueInput | PremiumQuoteWhereUniqueInput[]
    disconnect?: PremiumQuoteWhereUniqueInput | PremiumQuoteWhereUniqueInput[]
    delete?: PremiumQuoteWhereUniqueInput | PremiumQuoteWhereUniqueInput[]
    connect?: PremiumQuoteWhereUniqueInput | PremiumQuoteWhereUniqueInput[]
    update?: PremiumQuoteUpdateWithWhereUniqueWithoutTenantInput | PremiumQuoteUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: PremiumQuoteUpdateManyWithWhereWithoutTenantInput | PremiumQuoteUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: PremiumQuoteScalarWhereInput | PremiumQuoteScalarWhereInput[]
  }

  export type UsageEventUpdateManyWithoutTenantNestedInput = {
    create?: XOR<UsageEventCreateWithoutTenantInput, UsageEventUncheckedCreateWithoutTenantInput> | UsageEventCreateWithoutTenantInput[] | UsageEventUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: UsageEventCreateOrConnectWithoutTenantInput | UsageEventCreateOrConnectWithoutTenantInput[]
    upsert?: UsageEventUpsertWithWhereUniqueWithoutTenantInput | UsageEventUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: UsageEventCreateManyTenantInputEnvelope
    set?: UsageEventWhereUniqueInput | UsageEventWhereUniqueInput[]
    disconnect?: UsageEventWhereUniqueInput | UsageEventWhereUniqueInput[]
    delete?: UsageEventWhereUniqueInput | UsageEventWhereUniqueInput[]
    connect?: UsageEventWhereUniqueInput | UsageEventWhereUniqueInput[]
    update?: UsageEventUpdateWithWhereUniqueWithoutTenantInput | UsageEventUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: UsageEventUpdateManyWithWhereWithoutTenantInput | UsageEventUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: UsageEventScalarWhereInput | UsageEventScalarWhereInput[]
  }

  export type TenantInvoiceUpdateManyWithoutTenantNestedInput = {
    create?: XOR<TenantInvoiceCreateWithoutTenantInput, TenantInvoiceUncheckedCreateWithoutTenantInput> | TenantInvoiceCreateWithoutTenantInput[] | TenantInvoiceUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: TenantInvoiceCreateOrConnectWithoutTenantInput | TenantInvoiceCreateOrConnectWithoutTenantInput[]
    upsert?: TenantInvoiceUpsertWithWhereUniqueWithoutTenantInput | TenantInvoiceUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: TenantInvoiceCreateManyTenantInputEnvelope
    set?: TenantInvoiceWhereUniqueInput | TenantInvoiceWhereUniqueInput[]
    disconnect?: TenantInvoiceWhereUniqueInput | TenantInvoiceWhereUniqueInput[]
    delete?: TenantInvoiceWhereUniqueInput | TenantInvoiceWhereUniqueInput[]
    connect?: TenantInvoiceWhereUniqueInput | TenantInvoiceWhereUniqueInput[]
    update?: TenantInvoiceUpdateWithWhereUniqueWithoutTenantInput | TenantInvoiceUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: TenantInvoiceUpdateManyWithWhereWithoutTenantInput | TenantInvoiceUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: TenantInvoiceScalarWhereInput | TenantInvoiceScalarWhereInput[]
  }

  export type CapsuleUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<CapsuleCreateWithoutTenantInput, CapsuleUncheckedCreateWithoutTenantInput> | CapsuleCreateWithoutTenantInput[] | CapsuleUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: CapsuleCreateOrConnectWithoutTenantInput | CapsuleCreateOrConnectWithoutTenantInput[]
    upsert?: CapsuleUpsertWithWhereUniqueWithoutTenantInput | CapsuleUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: CapsuleCreateManyTenantInputEnvelope
    set?: CapsuleWhereUniqueInput | CapsuleWhereUniqueInput[]
    disconnect?: CapsuleWhereUniqueInput | CapsuleWhereUniqueInput[]
    delete?: CapsuleWhereUniqueInput | CapsuleWhereUniqueInput[]
    connect?: CapsuleWhereUniqueInput | CapsuleWhereUniqueInput[]
    update?: CapsuleUpdateWithWhereUniqueWithoutTenantInput | CapsuleUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: CapsuleUpdateManyWithWhereWithoutTenantInput | CapsuleUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: CapsuleScalarWhereInput | CapsuleScalarWhereInput[]
  }

  export type PremiumQuoteUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<PremiumQuoteCreateWithoutTenantInput, PremiumQuoteUncheckedCreateWithoutTenantInput> | PremiumQuoteCreateWithoutTenantInput[] | PremiumQuoteUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PremiumQuoteCreateOrConnectWithoutTenantInput | PremiumQuoteCreateOrConnectWithoutTenantInput[]
    upsert?: PremiumQuoteUpsertWithWhereUniqueWithoutTenantInput | PremiumQuoteUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: PremiumQuoteCreateManyTenantInputEnvelope
    set?: PremiumQuoteWhereUniqueInput | PremiumQuoteWhereUniqueInput[]
    disconnect?: PremiumQuoteWhereUniqueInput | PremiumQuoteWhereUniqueInput[]
    delete?: PremiumQuoteWhereUniqueInput | PremiumQuoteWhereUniqueInput[]
    connect?: PremiumQuoteWhereUniqueInput | PremiumQuoteWhereUniqueInput[]
    update?: PremiumQuoteUpdateWithWhereUniqueWithoutTenantInput | PremiumQuoteUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: PremiumQuoteUpdateManyWithWhereWithoutTenantInput | PremiumQuoteUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: PremiumQuoteScalarWhereInput | PremiumQuoteScalarWhereInput[]
  }

  export type UsageEventUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<UsageEventCreateWithoutTenantInput, UsageEventUncheckedCreateWithoutTenantInput> | UsageEventCreateWithoutTenantInput[] | UsageEventUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: UsageEventCreateOrConnectWithoutTenantInput | UsageEventCreateOrConnectWithoutTenantInput[]
    upsert?: UsageEventUpsertWithWhereUniqueWithoutTenantInput | UsageEventUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: UsageEventCreateManyTenantInputEnvelope
    set?: UsageEventWhereUniqueInput | UsageEventWhereUniqueInput[]
    disconnect?: UsageEventWhereUniqueInput | UsageEventWhereUniqueInput[]
    delete?: UsageEventWhereUniqueInput | UsageEventWhereUniqueInput[]
    connect?: UsageEventWhereUniqueInput | UsageEventWhereUniqueInput[]
    update?: UsageEventUpdateWithWhereUniqueWithoutTenantInput | UsageEventUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: UsageEventUpdateManyWithWhereWithoutTenantInput | UsageEventUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: UsageEventScalarWhereInput | UsageEventScalarWhereInput[]
  }

  export type TenantInvoiceUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<TenantInvoiceCreateWithoutTenantInput, TenantInvoiceUncheckedCreateWithoutTenantInput> | TenantInvoiceCreateWithoutTenantInput[] | TenantInvoiceUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: TenantInvoiceCreateOrConnectWithoutTenantInput | TenantInvoiceCreateOrConnectWithoutTenantInput[]
    upsert?: TenantInvoiceUpsertWithWhereUniqueWithoutTenantInput | TenantInvoiceUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: TenantInvoiceCreateManyTenantInputEnvelope
    set?: TenantInvoiceWhereUniqueInput | TenantInvoiceWhereUniqueInput[]
    disconnect?: TenantInvoiceWhereUniqueInput | TenantInvoiceWhereUniqueInput[]
    delete?: TenantInvoiceWhereUniqueInput | TenantInvoiceWhereUniqueInput[]
    connect?: TenantInvoiceWhereUniqueInput | TenantInvoiceWhereUniqueInput[]
    update?: TenantInvoiceUpdateWithWhereUniqueWithoutTenantInput | TenantInvoiceUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: TenantInvoiceUpdateManyWithWhereWithoutTenantInput | TenantInvoiceUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: TenantInvoiceScalarWhereInput | TenantInvoiceScalarWhereInput[]
  }

  export type TenantCreateNestedOneWithoutCapsulesInput = {
    create?: XOR<TenantCreateWithoutCapsulesInput, TenantUncheckedCreateWithoutCapsulesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutCapsulesInput
    connect?: TenantWhereUniqueInput
  }

  export type PremiumQuoteCreateNestedManyWithoutCapsuleInput = {
    create?: XOR<PremiumQuoteCreateWithoutCapsuleInput, PremiumQuoteUncheckedCreateWithoutCapsuleInput> | PremiumQuoteCreateWithoutCapsuleInput[] | PremiumQuoteUncheckedCreateWithoutCapsuleInput[]
    connectOrCreate?: PremiumQuoteCreateOrConnectWithoutCapsuleInput | PremiumQuoteCreateOrConnectWithoutCapsuleInput[]
    createMany?: PremiumQuoteCreateManyCapsuleInputEnvelope
    connect?: PremiumQuoteWhereUniqueInput | PremiumQuoteWhereUniqueInput[]
  }

  export type PremiumQuoteUncheckedCreateNestedManyWithoutCapsuleInput = {
    create?: XOR<PremiumQuoteCreateWithoutCapsuleInput, PremiumQuoteUncheckedCreateWithoutCapsuleInput> | PremiumQuoteCreateWithoutCapsuleInput[] | PremiumQuoteUncheckedCreateWithoutCapsuleInput[]
    connectOrCreate?: PremiumQuoteCreateOrConnectWithoutCapsuleInput | PremiumQuoteCreateOrConnectWithoutCapsuleInput[]
    createMany?: PremiumQuoteCreateManyCapsuleInputEnvelope
    connect?: PremiumQuoteWhereUniqueInput | PremiumQuoteWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type TenantUpdateOneRequiredWithoutCapsulesNestedInput = {
    create?: XOR<TenantCreateWithoutCapsulesInput, TenantUncheckedCreateWithoutCapsulesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutCapsulesInput
    upsert?: TenantUpsertWithoutCapsulesInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutCapsulesInput, TenantUpdateWithoutCapsulesInput>, TenantUncheckedUpdateWithoutCapsulesInput>
  }

  export type PremiumQuoteUpdateManyWithoutCapsuleNestedInput = {
    create?: XOR<PremiumQuoteCreateWithoutCapsuleInput, PremiumQuoteUncheckedCreateWithoutCapsuleInput> | PremiumQuoteCreateWithoutCapsuleInput[] | PremiumQuoteUncheckedCreateWithoutCapsuleInput[]
    connectOrCreate?: PremiumQuoteCreateOrConnectWithoutCapsuleInput | PremiumQuoteCreateOrConnectWithoutCapsuleInput[]
    upsert?: PremiumQuoteUpsertWithWhereUniqueWithoutCapsuleInput | PremiumQuoteUpsertWithWhereUniqueWithoutCapsuleInput[]
    createMany?: PremiumQuoteCreateManyCapsuleInputEnvelope
    set?: PremiumQuoteWhereUniqueInput | PremiumQuoteWhereUniqueInput[]
    disconnect?: PremiumQuoteWhereUniqueInput | PremiumQuoteWhereUniqueInput[]
    delete?: PremiumQuoteWhereUniqueInput | PremiumQuoteWhereUniqueInput[]
    connect?: PremiumQuoteWhereUniqueInput | PremiumQuoteWhereUniqueInput[]
    update?: PremiumQuoteUpdateWithWhereUniqueWithoutCapsuleInput | PremiumQuoteUpdateWithWhereUniqueWithoutCapsuleInput[]
    updateMany?: PremiumQuoteUpdateManyWithWhereWithoutCapsuleInput | PremiumQuoteUpdateManyWithWhereWithoutCapsuleInput[]
    deleteMany?: PremiumQuoteScalarWhereInput | PremiumQuoteScalarWhereInput[]
  }

  export type PremiumQuoteUncheckedUpdateManyWithoutCapsuleNestedInput = {
    create?: XOR<PremiumQuoteCreateWithoutCapsuleInput, PremiumQuoteUncheckedCreateWithoutCapsuleInput> | PremiumQuoteCreateWithoutCapsuleInput[] | PremiumQuoteUncheckedCreateWithoutCapsuleInput[]
    connectOrCreate?: PremiumQuoteCreateOrConnectWithoutCapsuleInput | PremiumQuoteCreateOrConnectWithoutCapsuleInput[]
    upsert?: PremiumQuoteUpsertWithWhereUniqueWithoutCapsuleInput | PremiumQuoteUpsertWithWhereUniqueWithoutCapsuleInput[]
    createMany?: PremiumQuoteCreateManyCapsuleInputEnvelope
    set?: PremiumQuoteWhereUniqueInput | PremiumQuoteWhereUniqueInput[]
    disconnect?: PremiumQuoteWhereUniqueInput | PremiumQuoteWhereUniqueInput[]
    delete?: PremiumQuoteWhereUniqueInput | PremiumQuoteWhereUniqueInput[]
    connect?: PremiumQuoteWhereUniqueInput | PremiumQuoteWhereUniqueInput[]
    update?: PremiumQuoteUpdateWithWhereUniqueWithoutCapsuleInput | PremiumQuoteUpdateWithWhereUniqueWithoutCapsuleInput[]
    updateMany?: PremiumQuoteUpdateManyWithWhereWithoutCapsuleInput | PremiumQuoteUpdateManyWithWhereWithoutCapsuleInput[]
    deleteMany?: PremiumQuoteScalarWhereInput | PremiumQuoteScalarWhereInput[]
  }

  export type CapsuleCreateNestedOneWithoutPremiumQuotesInput = {
    create?: XOR<CapsuleCreateWithoutPremiumQuotesInput, CapsuleUncheckedCreateWithoutPremiumQuotesInput>
    connectOrCreate?: CapsuleCreateOrConnectWithoutPremiumQuotesInput
    connect?: CapsuleWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutPremiumQuotesInput = {
    create?: XOR<TenantCreateWithoutPremiumQuotesInput, TenantUncheckedCreateWithoutPremiumQuotesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutPremiumQuotesInput
    connect?: TenantWhereUniqueInput
  }

  export type CapsuleUpdateOneRequiredWithoutPremiumQuotesNestedInput = {
    create?: XOR<CapsuleCreateWithoutPremiumQuotesInput, CapsuleUncheckedCreateWithoutPremiumQuotesInput>
    connectOrCreate?: CapsuleCreateOrConnectWithoutPremiumQuotesInput
    upsert?: CapsuleUpsertWithoutPremiumQuotesInput
    connect?: CapsuleWhereUniqueInput
    update?: XOR<XOR<CapsuleUpdateToOneWithWhereWithoutPremiumQuotesInput, CapsuleUpdateWithoutPremiumQuotesInput>, CapsuleUncheckedUpdateWithoutPremiumQuotesInput>
  }

  export type TenantUpdateOneRequiredWithoutPremiumQuotesNestedInput = {
    create?: XOR<TenantCreateWithoutPremiumQuotesInput, TenantUncheckedCreateWithoutPremiumQuotesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutPremiumQuotesInput
    upsert?: TenantUpsertWithoutPremiumQuotesInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutPremiumQuotesInput, TenantUpdateWithoutPremiumQuotesInput>, TenantUncheckedUpdateWithoutPremiumQuotesInput>
  }

  export type TenantCreateNestedOneWithoutUsageEventsInput = {
    create?: XOR<TenantCreateWithoutUsageEventsInput, TenantUncheckedCreateWithoutUsageEventsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutUsageEventsInput
    connect?: TenantWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TenantUpdateOneRequiredWithoutUsageEventsNestedInput = {
    create?: XOR<TenantCreateWithoutUsageEventsInput, TenantUncheckedCreateWithoutUsageEventsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutUsageEventsInput
    upsert?: TenantUpsertWithoutUsageEventsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutUsageEventsInput, TenantUpdateWithoutUsageEventsInput>, TenantUncheckedUpdateWithoutUsageEventsInput>
  }

  export type TenantCreateNestedOneWithoutInvoicesInput = {
    create?: XOR<TenantCreateWithoutInvoicesInput, TenantUncheckedCreateWithoutInvoicesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutInvoicesInput
    connect?: TenantWhereUniqueInput
  }

  export type TenantUpdateOneRequiredWithoutInvoicesNestedInput = {
    create?: XOR<TenantCreateWithoutInvoicesInput, TenantUncheckedCreateWithoutInvoicesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutInvoicesInput
    upsert?: TenantUpsertWithoutInvoicesInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutInvoicesInput, TenantUpdateWithoutInvoicesInput>, TenantUncheckedUpdateWithoutInvoicesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type CapsuleCreateWithoutTenantInput = {
    id?: string
    hash: string
    specSig: string
    riskScore?: number
    reason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    premiumQuotes?: PremiumQuoteCreateNestedManyWithoutCapsuleInput
  }

  export type CapsuleUncheckedCreateWithoutTenantInput = {
    id?: string
    hash: string
    specSig: string
    riskScore?: number
    reason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    premiumQuotes?: PremiumQuoteUncheckedCreateNestedManyWithoutCapsuleInput
  }

  export type CapsuleCreateOrConnectWithoutTenantInput = {
    where: CapsuleWhereUniqueInput
    create: XOR<CapsuleCreateWithoutTenantInput, CapsuleUncheckedCreateWithoutTenantInput>
  }

  export type CapsuleCreateManyTenantInputEnvelope = {
    data: CapsuleCreateManyTenantInput | CapsuleCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type PremiumQuoteCreateWithoutTenantInput = {
    id?: string
    riskScore: number
    annualUsd: number
    createdAt?: Date | string
    capsule: CapsuleCreateNestedOneWithoutPremiumQuotesInput
  }

  export type PremiumQuoteUncheckedCreateWithoutTenantInput = {
    id?: string
    capsuleHash: string
    riskScore: number
    annualUsd: number
    createdAt?: Date | string
  }

  export type PremiumQuoteCreateOrConnectWithoutTenantInput = {
    where: PremiumQuoteWhereUniqueInput
    create: XOR<PremiumQuoteCreateWithoutTenantInput, PremiumQuoteUncheckedCreateWithoutTenantInput>
  }

  export type PremiumQuoteCreateManyTenantInputEnvelope = {
    data: PremiumQuoteCreateManyTenantInput | PremiumQuoteCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type UsageEventCreateWithoutTenantInput = {
    id?: string
    cpuMs: number
    netBytes: number
    ts?: Date | string
    createdAt?: Date | string
  }

  export type UsageEventUncheckedCreateWithoutTenantInput = {
    id?: string
    cpuMs: number
    netBytes: number
    ts?: Date | string
    createdAt?: Date | string
  }

  export type UsageEventCreateOrConnectWithoutTenantInput = {
    where: UsageEventWhereUniqueInput
    create: XOR<UsageEventCreateWithoutTenantInput, UsageEventUncheckedCreateWithoutTenantInput>
  }

  export type UsageEventCreateManyTenantInputEnvelope = {
    data: UsageEventCreateManyTenantInput | UsageEventCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type TenantInvoiceCreateWithoutTenantInput = {
    id?: string
    periodStart: Date | string
    periodEnd: Date | string
    costUsd: number
    usageEvents: number
    totalCpuMs: number
    totalNetBytes: number
    createdAt?: Date | string
  }

  export type TenantInvoiceUncheckedCreateWithoutTenantInput = {
    id?: string
    periodStart: Date | string
    periodEnd: Date | string
    costUsd: number
    usageEvents: number
    totalCpuMs: number
    totalNetBytes: number
    createdAt?: Date | string
  }

  export type TenantInvoiceCreateOrConnectWithoutTenantInput = {
    where: TenantInvoiceWhereUniqueInput
    create: XOR<TenantInvoiceCreateWithoutTenantInput, TenantInvoiceUncheckedCreateWithoutTenantInput>
  }

  export type TenantInvoiceCreateManyTenantInputEnvelope = {
    data: TenantInvoiceCreateManyTenantInput | TenantInvoiceCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type CapsuleUpsertWithWhereUniqueWithoutTenantInput = {
    where: CapsuleWhereUniqueInput
    update: XOR<CapsuleUpdateWithoutTenantInput, CapsuleUncheckedUpdateWithoutTenantInput>
    create: XOR<CapsuleCreateWithoutTenantInput, CapsuleUncheckedCreateWithoutTenantInput>
  }

  export type CapsuleUpdateWithWhereUniqueWithoutTenantInput = {
    where: CapsuleWhereUniqueInput
    data: XOR<CapsuleUpdateWithoutTenantInput, CapsuleUncheckedUpdateWithoutTenantInput>
  }

  export type CapsuleUpdateManyWithWhereWithoutTenantInput = {
    where: CapsuleScalarWhereInput
    data: XOR<CapsuleUpdateManyMutationInput, CapsuleUncheckedUpdateManyWithoutTenantInput>
  }

  export type CapsuleScalarWhereInput = {
    AND?: CapsuleScalarWhereInput | CapsuleScalarWhereInput[]
    OR?: CapsuleScalarWhereInput[]
    NOT?: CapsuleScalarWhereInput | CapsuleScalarWhereInput[]
    id?: StringFilter<"Capsule"> | string
    hash?: StringFilter<"Capsule"> | string
    specSig?: StringFilter<"Capsule"> | string
    riskScore?: FloatFilter<"Capsule"> | number
    reason?: StringNullableFilter<"Capsule"> | string | null
    tenantId?: StringFilter<"Capsule"> | string
    createdAt?: DateTimeFilter<"Capsule"> | Date | string
    updatedAt?: DateTimeFilter<"Capsule"> | Date | string
  }

  export type PremiumQuoteUpsertWithWhereUniqueWithoutTenantInput = {
    where: PremiumQuoteWhereUniqueInput
    update: XOR<PremiumQuoteUpdateWithoutTenantInput, PremiumQuoteUncheckedUpdateWithoutTenantInput>
    create: XOR<PremiumQuoteCreateWithoutTenantInput, PremiumQuoteUncheckedCreateWithoutTenantInput>
  }

  export type PremiumQuoteUpdateWithWhereUniqueWithoutTenantInput = {
    where: PremiumQuoteWhereUniqueInput
    data: XOR<PremiumQuoteUpdateWithoutTenantInput, PremiumQuoteUncheckedUpdateWithoutTenantInput>
  }

  export type PremiumQuoteUpdateManyWithWhereWithoutTenantInput = {
    where: PremiumQuoteScalarWhereInput
    data: XOR<PremiumQuoteUpdateManyMutationInput, PremiumQuoteUncheckedUpdateManyWithoutTenantInput>
  }

  export type PremiumQuoteScalarWhereInput = {
    AND?: PremiumQuoteScalarWhereInput | PremiumQuoteScalarWhereInput[]
    OR?: PremiumQuoteScalarWhereInput[]
    NOT?: PremiumQuoteScalarWhereInput | PremiumQuoteScalarWhereInput[]
    id?: StringFilter<"PremiumQuote"> | string
    capsuleHash?: StringFilter<"PremiumQuote"> | string
    riskScore?: FloatFilter<"PremiumQuote"> | number
    annualUsd?: FloatFilter<"PremiumQuote"> | number
    tenantId?: StringFilter<"PremiumQuote"> | string
    createdAt?: DateTimeFilter<"PremiumQuote"> | Date | string
  }

  export type UsageEventUpsertWithWhereUniqueWithoutTenantInput = {
    where: UsageEventWhereUniqueInput
    update: XOR<UsageEventUpdateWithoutTenantInput, UsageEventUncheckedUpdateWithoutTenantInput>
    create: XOR<UsageEventCreateWithoutTenantInput, UsageEventUncheckedCreateWithoutTenantInput>
  }

  export type UsageEventUpdateWithWhereUniqueWithoutTenantInput = {
    where: UsageEventWhereUniqueInput
    data: XOR<UsageEventUpdateWithoutTenantInput, UsageEventUncheckedUpdateWithoutTenantInput>
  }

  export type UsageEventUpdateManyWithWhereWithoutTenantInput = {
    where: UsageEventScalarWhereInput
    data: XOR<UsageEventUpdateManyMutationInput, UsageEventUncheckedUpdateManyWithoutTenantInput>
  }

  export type UsageEventScalarWhereInput = {
    AND?: UsageEventScalarWhereInput | UsageEventScalarWhereInput[]
    OR?: UsageEventScalarWhereInput[]
    NOT?: UsageEventScalarWhereInput | UsageEventScalarWhereInput[]
    id?: StringFilter<"UsageEvent"> | string
    tenantId?: StringFilter<"UsageEvent"> | string
    cpuMs?: IntFilter<"UsageEvent"> | number
    netBytes?: IntFilter<"UsageEvent"> | number
    ts?: DateTimeFilter<"UsageEvent"> | Date | string
    createdAt?: DateTimeFilter<"UsageEvent"> | Date | string
  }

  export type TenantInvoiceUpsertWithWhereUniqueWithoutTenantInput = {
    where: TenantInvoiceWhereUniqueInput
    update: XOR<TenantInvoiceUpdateWithoutTenantInput, TenantInvoiceUncheckedUpdateWithoutTenantInput>
    create: XOR<TenantInvoiceCreateWithoutTenantInput, TenantInvoiceUncheckedCreateWithoutTenantInput>
  }

  export type TenantInvoiceUpdateWithWhereUniqueWithoutTenantInput = {
    where: TenantInvoiceWhereUniqueInput
    data: XOR<TenantInvoiceUpdateWithoutTenantInput, TenantInvoiceUncheckedUpdateWithoutTenantInput>
  }

  export type TenantInvoiceUpdateManyWithWhereWithoutTenantInput = {
    where: TenantInvoiceScalarWhereInput
    data: XOR<TenantInvoiceUpdateManyMutationInput, TenantInvoiceUncheckedUpdateManyWithoutTenantInput>
  }

  export type TenantInvoiceScalarWhereInput = {
    AND?: TenantInvoiceScalarWhereInput | TenantInvoiceScalarWhereInput[]
    OR?: TenantInvoiceScalarWhereInput[]
    NOT?: TenantInvoiceScalarWhereInput | TenantInvoiceScalarWhereInput[]
    id?: StringFilter<"TenantInvoice"> | string
    tenantId?: StringFilter<"TenantInvoice"> | string
    periodStart?: DateTimeFilter<"TenantInvoice"> | Date | string
    periodEnd?: DateTimeFilter<"TenantInvoice"> | Date | string
    costUsd?: FloatFilter<"TenantInvoice"> | number
    usageEvents?: IntFilter<"TenantInvoice"> | number
    totalCpuMs?: IntFilter<"TenantInvoice"> | number
    totalNetBytes?: IntFilter<"TenantInvoice"> | number
    createdAt?: DateTimeFilter<"TenantInvoice"> | Date | string
  }

  export type TenantCreateWithoutCapsulesInput = {
    id?: string
    name: string
    auth0Id: string
    createdAt?: Date | string
    updatedAt?: Date | string
    premiumQuotes?: PremiumQuoteCreateNestedManyWithoutTenantInput
    usageEvents?: UsageEventCreateNestedManyWithoutTenantInput
    invoices?: TenantInvoiceCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutCapsulesInput = {
    id?: string
    name: string
    auth0Id: string
    createdAt?: Date | string
    updatedAt?: Date | string
    premiumQuotes?: PremiumQuoteUncheckedCreateNestedManyWithoutTenantInput
    usageEvents?: UsageEventUncheckedCreateNestedManyWithoutTenantInput
    invoices?: TenantInvoiceUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutCapsulesInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutCapsulesInput, TenantUncheckedCreateWithoutCapsulesInput>
  }

  export type PremiumQuoteCreateWithoutCapsuleInput = {
    id?: string
    riskScore: number
    annualUsd: number
    createdAt?: Date | string
    tenant: TenantCreateNestedOneWithoutPremiumQuotesInput
  }

  export type PremiumQuoteUncheckedCreateWithoutCapsuleInput = {
    id?: string
    riskScore: number
    annualUsd: number
    tenantId: string
    createdAt?: Date | string
  }

  export type PremiumQuoteCreateOrConnectWithoutCapsuleInput = {
    where: PremiumQuoteWhereUniqueInput
    create: XOR<PremiumQuoteCreateWithoutCapsuleInput, PremiumQuoteUncheckedCreateWithoutCapsuleInput>
  }

  export type PremiumQuoteCreateManyCapsuleInputEnvelope = {
    data: PremiumQuoteCreateManyCapsuleInput | PremiumQuoteCreateManyCapsuleInput[]
    skipDuplicates?: boolean
  }

  export type TenantUpsertWithoutCapsulesInput = {
    update: XOR<TenantUpdateWithoutCapsulesInput, TenantUncheckedUpdateWithoutCapsulesInput>
    create: XOR<TenantCreateWithoutCapsulesInput, TenantUncheckedCreateWithoutCapsulesInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutCapsulesInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutCapsulesInput, TenantUncheckedUpdateWithoutCapsulesInput>
  }

  export type TenantUpdateWithoutCapsulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    auth0Id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    premiumQuotes?: PremiumQuoteUpdateManyWithoutTenantNestedInput
    usageEvents?: UsageEventUpdateManyWithoutTenantNestedInput
    invoices?: TenantInvoiceUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutCapsulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    auth0Id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    premiumQuotes?: PremiumQuoteUncheckedUpdateManyWithoutTenantNestedInput
    usageEvents?: UsageEventUncheckedUpdateManyWithoutTenantNestedInput
    invoices?: TenantInvoiceUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type PremiumQuoteUpsertWithWhereUniqueWithoutCapsuleInput = {
    where: PremiumQuoteWhereUniqueInput
    update: XOR<PremiumQuoteUpdateWithoutCapsuleInput, PremiumQuoteUncheckedUpdateWithoutCapsuleInput>
    create: XOR<PremiumQuoteCreateWithoutCapsuleInput, PremiumQuoteUncheckedCreateWithoutCapsuleInput>
  }

  export type PremiumQuoteUpdateWithWhereUniqueWithoutCapsuleInput = {
    where: PremiumQuoteWhereUniqueInput
    data: XOR<PremiumQuoteUpdateWithoutCapsuleInput, PremiumQuoteUncheckedUpdateWithoutCapsuleInput>
  }

  export type PremiumQuoteUpdateManyWithWhereWithoutCapsuleInput = {
    where: PremiumQuoteScalarWhereInput
    data: XOR<PremiumQuoteUpdateManyMutationInput, PremiumQuoteUncheckedUpdateManyWithoutCapsuleInput>
  }

  export type CapsuleCreateWithoutPremiumQuotesInput = {
    id?: string
    hash: string
    specSig: string
    riskScore?: number
    reason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutCapsulesInput
  }

  export type CapsuleUncheckedCreateWithoutPremiumQuotesInput = {
    id?: string
    hash: string
    specSig: string
    riskScore?: number
    reason?: string | null
    tenantId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CapsuleCreateOrConnectWithoutPremiumQuotesInput = {
    where: CapsuleWhereUniqueInput
    create: XOR<CapsuleCreateWithoutPremiumQuotesInput, CapsuleUncheckedCreateWithoutPremiumQuotesInput>
  }

  export type TenantCreateWithoutPremiumQuotesInput = {
    id?: string
    name: string
    auth0Id: string
    createdAt?: Date | string
    updatedAt?: Date | string
    capsules?: CapsuleCreateNestedManyWithoutTenantInput
    usageEvents?: UsageEventCreateNestedManyWithoutTenantInput
    invoices?: TenantInvoiceCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutPremiumQuotesInput = {
    id?: string
    name: string
    auth0Id: string
    createdAt?: Date | string
    updatedAt?: Date | string
    capsules?: CapsuleUncheckedCreateNestedManyWithoutTenantInput
    usageEvents?: UsageEventUncheckedCreateNestedManyWithoutTenantInput
    invoices?: TenantInvoiceUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutPremiumQuotesInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutPremiumQuotesInput, TenantUncheckedCreateWithoutPremiumQuotesInput>
  }

  export type CapsuleUpsertWithoutPremiumQuotesInput = {
    update: XOR<CapsuleUpdateWithoutPremiumQuotesInput, CapsuleUncheckedUpdateWithoutPremiumQuotesInput>
    create: XOR<CapsuleCreateWithoutPremiumQuotesInput, CapsuleUncheckedCreateWithoutPremiumQuotesInput>
    where?: CapsuleWhereInput
  }

  export type CapsuleUpdateToOneWithWhereWithoutPremiumQuotesInput = {
    where?: CapsuleWhereInput
    data: XOR<CapsuleUpdateWithoutPremiumQuotesInput, CapsuleUncheckedUpdateWithoutPremiumQuotesInput>
  }

  export type CapsuleUpdateWithoutPremiumQuotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    specSig?: StringFieldUpdateOperationsInput | string
    riskScore?: FloatFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutCapsulesNestedInput
  }

  export type CapsuleUncheckedUpdateWithoutPremiumQuotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    specSig?: StringFieldUpdateOperationsInput | string
    riskScore?: FloatFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantUpsertWithoutPremiumQuotesInput = {
    update: XOR<TenantUpdateWithoutPremiumQuotesInput, TenantUncheckedUpdateWithoutPremiumQuotesInput>
    create: XOR<TenantCreateWithoutPremiumQuotesInput, TenantUncheckedCreateWithoutPremiumQuotesInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutPremiumQuotesInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutPremiumQuotesInput, TenantUncheckedUpdateWithoutPremiumQuotesInput>
  }

  export type TenantUpdateWithoutPremiumQuotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    auth0Id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    capsules?: CapsuleUpdateManyWithoutTenantNestedInput
    usageEvents?: UsageEventUpdateManyWithoutTenantNestedInput
    invoices?: TenantInvoiceUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutPremiumQuotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    auth0Id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    capsules?: CapsuleUncheckedUpdateManyWithoutTenantNestedInput
    usageEvents?: UsageEventUncheckedUpdateManyWithoutTenantNestedInput
    invoices?: TenantInvoiceUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantCreateWithoutUsageEventsInput = {
    id?: string
    name: string
    auth0Id: string
    createdAt?: Date | string
    updatedAt?: Date | string
    capsules?: CapsuleCreateNestedManyWithoutTenantInput
    premiumQuotes?: PremiumQuoteCreateNestedManyWithoutTenantInput
    invoices?: TenantInvoiceCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutUsageEventsInput = {
    id?: string
    name: string
    auth0Id: string
    createdAt?: Date | string
    updatedAt?: Date | string
    capsules?: CapsuleUncheckedCreateNestedManyWithoutTenantInput
    premiumQuotes?: PremiumQuoteUncheckedCreateNestedManyWithoutTenantInput
    invoices?: TenantInvoiceUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutUsageEventsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutUsageEventsInput, TenantUncheckedCreateWithoutUsageEventsInput>
  }

  export type TenantUpsertWithoutUsageEventsInput = {
    update: XOR<TenantUpdateWithoutUsageEventsInput, TenantUncheckedUpdateWithoutUsageEventsInput>
    create: XOR<TenantCreateWithoutUsageEventsInput, TenantUncheckedCreateWithoutUsageEventsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutUsageEventsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutUsageEventsInput, TenantUncheckedUpdateWithoutUsageEventsInput>
  }

  export type TenantUpdateWithoutUsageEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    auth0Id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    capsules?: CapsuleUpdateManyWithoutTenantNestedInput
    premiumQuotes?: PremiumQuoteUpdateManyWithoutTenantNestedInput
    invoices?: TenantInvoiceUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutUsageEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    auth0Id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    capsules?: CapsuleUncheckedUpdateManyWithoutTenantNestedInput
    premiumQuotes?: PremiumQuoteUncheckedUpdateManyWithoutTenantNestedInput
    invoices?: TenantInvoiceUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantCreateWithoutInvoicesInput = {
    id?: string
    name: string
    auth0Id: string
    createdAt?: Date | string
    updatedAt?: Date | string
    capsules?: CapsuleCreateNestedManyWithoutTenantInput
    premiumQuotes?: PremiumQuoteCreateNestedManyWithoutTenantInput
    usageEvents?: UsageEventCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutInvoicesInput = {
    id?: string
    name: string
    auth0Id: string
    createdAt?: Date | string
    updatedAt?: Date | string
    capsules?: CapsuleUncheckedCreateNestedManyWithoutTenantInput
    premiumQuotes?: PremiumQuoteUncheckedCreateNestedManyWithoutTenantInput
    usageEvents?: UsageEventUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutInvoicesInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutInvoicesInput, TenantUncheckedCreateWithoutInvoicesInput>
  }

  export type TenantUpsertWithoutInvoicesInput = {
    update: XOR<TenantUpdateWithoutInvoicesInput, TenantUncheckedUpdateWithoutInvoicesInput>
    create: XOR<TenantCreateWithoutInvoicesInput, TenantUncheckedCreateWithoutInvoicesInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutInvoicesInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutInvoicesInput, TenantUncheckedUpdateWithoutInvoicesInput>
  }

  export type TenantUpdateWithoutInvoicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    auth0Id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    capsules?: CapsuleUpdateManyWithoutTenantNestedInput
    premiumQuotes?: PremiumQuoteUpdateManyWithoutTenantNestedInput
    usageEvents?: UsageEventUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutInvoicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    auth0Id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    capsules?: CapsuleUncheckedUpdateManyWithoutTenantNestedInput
    premiumQuotes?: PremiumQuoteUncheckedUpdateManyWithoutTenantNestedInput
    usageEvents?: UsageEventUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type CapsuleCreateManyTenantInput = {
    id?: string
    hash: string
    specSig: string
    riskScore?: number
    reason?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PremiumQuoteCreateManyTenantInput = {
    id?: string
    capsuleHash: string
    riskScore: number
    annualUsd: number
    createdAt?: Date | string
  }

  export type UsageEventCreateManyTenantInput = {
    id?: string
    cpuMs: number
    netBytes: number
    ts?: Date | string
    createdAt?: Date | string
  }

  export type TenantInvoiceCreateManyTenantInput = {
    id?: string
    periodStart: Date | string
    periodEnd: Date | string
    costUsd: number
    usageEvents: number
    totalCpuMs: number
    totalNetBytes: number
    createdAt?: Date | string
  }

  export type CapsuleUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    specSig?: StringFieldUpdateOperationsInput | string
    riskScore?: FloatFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    premiumQuotes?: PremiumQuoteUpdateManyWithoutCapsuleNestedInput
  }

  export type CapsuleUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    specSig?: StringFieldUpdateOperationsInput | string
    riskScore?: FloatFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    premiumQuotes?: PremiumQuoteUncheckedUpdateManyWithoutCapsuleNestedInput
  }

  export type CapsuleUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    specSig?: StringFieldUpdateOperationsInput | string
    riskScore?: FloatFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PremiumQuoteUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    riskScore?: FloatFieldUpdateOperationsInput | number
    annualUsd?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    capsule?: CapsuleUpdateOneRequiredWithoutPremiumQuotesNestedInput
  }

  export type PremiumQuoteUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    capsuleHash?: StringFieldUpdateOperationsInput | string
    riskScore?: FloatFieldUpdateOperationsInput | number
    annualUsd?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PremiumQuoteUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    capsuleHash?: StringFieldUpdateOperationsInput | string
    riskScore?: FloatFieldUpdateOperationsInput | number
    annualUsd?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageEventUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    cpuMs?: IntFieldUpdateOperationsInput | number
    netBytes?: IntFieldUpdateOperationsInput | number
    ts?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageEventUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    cpuMs?: IntFieldUpdateOperationsInput | number
    netBytes?: IntFieldUpdateOperationsInput | number
    ts?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageEventUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    cpuMs?: IntFieldUpdateOperationsInput | number
    netBytes?: IntFieldUpdateOperationsInput | number
    ts?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantInvoiceUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    costUsd?: FloatFieldUpdateOperationsInput | number
    usageEvents?: IntFieldUpdateOperationsInput | number
    totalCpuMs?: IntFieldUpdateOperationsInput | number
    totalNetBytes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantInvoiceUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    costUsd?: FloatFieldUpdateOperationsInput | number
    usageEvents?: IntFieldUpdateOperationsInput | number
    totalCpuMs?: IntFieldUpdateOperationsInput | number
    totalNetBytes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TenantInvoiceUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    costUsd?: FloatFieldUpdateOperationsInput | number
    usageEvents?: IntFieldUpdateOperationsInput | number
    totalCpuMs?: IntFieldUpdateOperationsInput | number
    totalNetBytes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PremiumQuoteCreateManyCapsuleInput = {
    id?: string
    riskScore: number
    annualUsd: number
    tenantId: string
    createdAt?: Date | string
  }

  export type PremiumQuoteUpdateWithoutCapsuleInput = {
    id?: StringFieldUpdateOperationsInput | string
    riskScore?: FloatFieldUpdateOperationsInput | number
    annualUsd?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutPremiumQuotesNestedInput
  }

  export type PremiumQuoteUncheckedUpdateWithoutCapsuleInput = {
    id?: StringFieldUpdateOperationsInput | string
    riskScore?: FloatFieldUpdateOperationsInput | number
    annualUsd?: FloatFieldUpdateOperationsInput | number
    tenantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PremiumQuoteUncheckedUpdateManyWithoutCapsuleInput = {
    id?: StringFieldUpdateOperationsInput | string
    riskScore?: FloatFieldUpdateOperationsInput | number
    annualUsd?: FloatFieldUpdateOperationsInput | number
    tenantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use TenantCountOutputTypeDefaultArgs instead
     */
    export type TenantCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TenantCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CapsuleCountOutputTypeDefaultArgs instead
     */
    export type CapsuleCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CapsuleCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TenantDefaultArgs instead
     */
    export type TenantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TenantDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CapsuleDefaultArgs instead
     */
    export type CapsuleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CapsuleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PremiumQuoteDefaultArgs instead
     */
    export type PremiumQuoteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PremiumQuoteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsageEventDefaultArgs instead
     */
    export type UsageEventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsageEventDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TenantInvoiceDefaultArgs instead
     */
    export type TenantInvoiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TenantInvoiceDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}