name: Red-Team Attack Simulation

on:
  schedule:
    # Run weekly on Sundays at 1 AM UTC
    - cron: "0 1 * * 0"
  pull_request:
    paths:
      - "runtime/**"
      - "tests/redteam/**"
  workflow_dispatch:

jobs:
  redteam-attack:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Kind cluster
        run: |
          # Install Kind
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

          # Create Kind cluster
          kind create cluster --name redteam-test --config - <<EOF
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
          - role: control-plane
            extraPortMappings:
            - containerPort: 30000
              hostPort: 30000
          - role: worker
          - role: worker
          EOF

          # Wait for cluster to be ready
          kubectl wait --for=condition=Ready node --all --timeout=300s

      - name: Build and load images
        run: |
          # Build admission controller
          cd runtime/admission-controller
          docker build -t provability-fabric/admission-controller:test .
          kind load docker-image provability-fabric/admission-controller:test --name redteam-test

          # Build sidecar watcher
          cd ../sidecar-watcher
          docker build -t provability-fabric/sidecar-watcher:test .
          kind load docker-image provability-fabric/sidecar-watcher:test --name redteam-test

      - name: Deploy admission controller
        run: |
          cd runtime/admission-controller
          helm install admission ./deploy/admission \
            --set image.tag=test \
            --set image.pullPolicy=Never \
            --set leancheck.url=http://localhost:8080 \
            --set enablePolicy=true \
            --set ledger.url=http://ledger:4000/graphql

      - name: Start ledger service
        run: |
          cd runtime/ledger
          docker-compose up -d

          # Wait for ledger to be ready
          timeout 120 bash -c 'until curl -f http://localhost:4000/health; do sleep 2; done'

      - name: Install dependencies
        run: |
          pip install kubernetes requests pyyaml

      - name: Run red-team attacks
        run: |
          # Get kubeconfig
          kind get kubeconfig --name redteam-test > /tmp/kubeconfig

          # Run red-team harness
          python tests/redteam/redteam_runner.py \
            --kube-config /tmp/kubeconfig \
            --ledger-url http://localhost:4000 \
            --output redteam-results.md

      - name: Upload red-team results
        uses: actions/upload-artifact@v4
        with:
          name: redteam-results-${{ github.run_id }}
          path: redteam-results.md

      - name: Check attack results
        run: |
          if [ -f "redteam-results.md" ]; then
            echo "üìä Red-team attack results:"
            cat redteam-results.md
            
            # Check if any attacks failed
            if grep -q "‚ùå FAIL" redteam-results.md; then
              echo "‚ùå Some red-team attacks were not caught by guards!"
              exit 1
            else
              echo "‚úÖ All red-team attacks were properly caught by guards!"
            fi
          else
            echo "‚ùå No red-team results file found"
            exit 1
          fi

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let report = 'Red-team attack simulation completed.';

            try {
              if (fs.existsSync('redteam-results.md')) {
                report = fs.readFileSync('redteam-results.md', 'utf8');
              }
            } catch (error) {
              console.log('Could not read red-team results:', error.message);
            }

            const body = `## Red-Team Attack Simulation

            ${report}

            _Generated by Provability-Fabric red-team harness_`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });

      - name: Cleanup
        if: always()
        run: |
          # Clean up Kind cluster
          kind delete cluster --name redteam-test

          # Clean up ledger service
          cd runtime/ledger
          docker-compose down -v
