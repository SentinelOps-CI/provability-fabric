name: Billing Tests

on:
  push:
    branches: [main]
    paths:
      - "runtime/ledger/**"
      - "tools/billing/**"
      - ".github/workflows/billing-test.yaml"
  pull_request:
    branches: [main]
    paths:
      - "runtime/ledger/**"
      - "tools/billing/**"
      - ".github/workflows/billing-test.yaml"
  schedule:
    # Run billing tests daily at 2 AM UTC
    - cron: "0 2 * * *"

jobs:
  billing-tests:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: provability_fabric
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: runtime/ledger/package-lock.json

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: true

      - name: Install dependencies
        working-directory: runtime/ledger
        run: |
          npm ci
          npx prisma generate

      - name: Build billing tool
        working-directory: tools/billing
        run: |
          go mod tidy
          go build -o pf-billing

      - name: Run database migrations
        working-directory: runtime/ledger
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/provability_fabric
        run: |
          npx prisma migrate deploy

      - name: Start ledger service
        working-directory: runtime/ledger
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/provability_fabric
          PORT: 3000
        run: |
          npm start &
          sleep 10

      - name: Run billing tests
        working-directory: tools/billing
        run: |
          ./pf-billing test

      - name: Test rate card validation
        run: |
          # Test that billing job fails when rate card is missing
          # This simulates the double check mentioned in the prompt
          echo "Testing rate card validation..."

          # Create a test rate card with invalid values
          cat > invalid-rate-card.json << EOF
          {
            "cpuPerMs": -0.000001,
            "networkPerMB": 0.01,
            "minimumMonthly": 10.0
          }
          EOF

          # The billing service should reject negative rates
          if ./pf-billing test; then
            echo "ERROR: Billing service should have rejected invalid rate card"
            exit 1
          else
            echo "✓ Rate card validation working correctly"
          fi

      - name: Test future timestamp rejection
        run: |
          # Test that usage events with future timestamps are rejected
          echo "Testing future timestamp rejection..."

          # Create a test usage event with future timestamp
          cat > future-event.json << EOF
          {
            "tenantId": "test-tenant",
            "cpuMs": 1000,
            "netBytes": 1024,
            "ts": "$(date -d '+1 day' -Iseconds)"
          }
          EOF

          # The billing service should reject future timestamps
          if curl -X POST http://localhost:3000/usage \
             -H "Content-Type: application/json" \
             -d @future-event.json; then
            echo "ERROR: Billing service should have rejected future timestamp"
            exit 1
          else
            echo "✓ Future timestamp rejection working correctly"
          fi

      - name: Test cost calculation
        run: |
          # Test cost calculation with known values
          echo "Testing cost calculation..."

          # Create test usage events
          cat > test-events.json << EOF
          [
            {
              "tenantId": "test-tenant",
              "cpuMs": 1000000,
              "netBytes": 104857600,
              "ts": "$(date -Iseconds)"
            }
          ]
          EOF

          # Send test events
          curl -X POST http://localhost:3000/usage/batch \
             -H "Content-Type: application/json" \
             -d @test-events.json

          # Calculate expected cost
          # CPU: 1M ms * 0.000001 = $1.00
          # Network: 100MB * 0.01 = $1.00
          # Total: $2.00 (above minimum of $10.00, so $10.00)
          expected_cost=10.00

          # Get actual cost from API
          actual_cost=$(curl -s "http://localhost:3000/tenant/test-tenant/invoice?period=$(date +%Y-%m)" | jq -r '.costUsd')

          if [ "$actual_cost" = "$expected_cost" ]; then
            echo "✓ Cost calculation verified: $actual_cost"
          else
            echo "ERROR: Cost calculation mismatch. Expected: $expected_cost, Got: $actual_cost"
            exit 1
          fi

      - name: Test invoice generation
        run: |
          # Test PDF and CSV invoice generation
          echo "Testing invoice generation..."

          # Test CSV download
          if ./pf-billing download --tenant test-tenant --period $(date +%Y-%m) --format csv; then
            echo "✓ CSV invoice generation working"
          else
            echo "ERROR: CSV invoice generation failed"
            exit 1
          fi

          # Test PDF download
          if ./pf-billing download --tenant test-tenant --period $(date +%Y-%m) --format pdf; then
            echo "✓ PDF invoice generation working"
          else
            echo "ERROR: PDF invoice generation failed"
            exit 1
          fi

      - name: Test billing job
        run: |
          # Test the billing aggregation job
          echo "Testing billing job..."

          if ./pf-billing run-job --period $(date +%Y-%m); then
            echo "✓ Billing job completed successfully"
          else
            echo "ERROR: Billing job failed"
            exit 1
          fi

      - name: Verify test coverage
        working-directory: runtime/ledger
        run: |
          # Run tests with coverage
          npm test -- --coverage

          # Check that billing.ts has >= 90% coverage
          coverage=$(npm test -- --coverage --watchAll=false | grep -o 'All files.*%' | grep -o '[0-9]*%' | head -1 | sed 's/%//')

          if [ "$coverage" -ge 90 ]; then
            echo "✓ Test coverage: ${coverage}% (>= 90%)"
          else
            echo "ERROR: Test coverage ${coverage}% is below 90%"
            exit 1
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: billing-test-results
          path: |
            *.json
            *.csv
            *.pdf
          retention-days: 7
