name: DFA Export Validation

on:
  push:
    branches: [main, develop]
    paths:
      - "core/lean-libs/ActionDSL/**"
      - "core/lean-tools/ExportDFA.lean"
      - "bundles/**"
  pull_request:
    branches: [main, develop]
    paths:
      - "core/lean-libs/ActionDSL/**"
      - "core/lean-tools/ExportDFA.lean"
      - "bundles/**"

jobs:
  dfa-export:
    runs-on: ubuntu-latest
    timeout-minutes: 5 # 180s budget as required

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for commit comparison

      - name: Setup Lean
        run: |
          wget -q https://raw.githubusercontent.com/leanprover/lean4/master/elan-init.sh
          bash elan-init.sh -y
          . $HOME/.elan/env
          elan default leanprover/lean4:nightly-2025-01-15

      - name: Build ActionDSL library
        run: |
          cd core/lean-libs
          lake build ActionDSL

      - name: Build ExportDFA tool
        run: |
          cd core/lean-libs
          lake build ExportDFA

      - name: Export DFA for my-agent bundle
        run: |
          cd core/lean-libs
          lake exe ExportDFA --bundle ../../bundles/my-agent --out ../../artifact/dfa/dfa.json
        timeout-minutes: 3 # 180s budget

      - name: Verify DFA export exists
        run: |
          test -f artifact/dfa/dfa.json
          test -f artifact/dfa/dfa.sha256.txt
          echo "DFA export files created successfully"

      - name: Check DFA export changes
        id: dfa-changes
        run: |
          if git diff --quiet HEAD~1 HEAD artifact/dfa/dfa.json; then
            echo "no-dfa-changes=true" >> $GITHUB_OUTPUT
          else
            echo "no-dfa-changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Check Lean source changes
        id: lean-changes
        run: |
          if git diff --quiet HEAD~1 HEAD core/lean-libs/ActionDSL/ core/lean-tools/ExportDFA.lean; then
            echo "no-lean-changes=true" >> $GITHUB_OUTPUT
          else
            echo "no-lean-changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Fail if DFA changed without Lean changes
        if: steps.dfa-changes.outputs.no-dfa-changes == 'false' && steps.lean-changes.outputs.no-lean-changes == 'true'
        run: |
          echo "❌ DFA export changed without corresponding Lean source changes"
          echo "This violates the requirement that DFA changes must come from Lean commits"
          exit 1

      - name: Verify SHA-256 hash consistency
        run: |
          cd artifact/dfa
          expected_hash=$(cat dfa.sha256.txt)
          actual_hash=$(sha256sum dfa.json | cut -d' ' -f1)
          if [ "$expected_hash" != "sha256:$actual_hash" ]; then
            echo "❌ Hash mismatch: expected $expected_hash, got sha256:$actual_hash"
            exit 1
          fi
          echo "✅ SHA-256 hash verification passed"

      - name: Validate DFA JSON schema
        run: |
          cd artifact/dfa
          # Basic JSON validation
          python3 -c "
          import json
          with open('dfa.json', 'r') as f:
              data = json.load(f)
          required_fields = ['version', 'dfa_type', 'states', 'transitions', 'rate_limiters', 'initial_state']
          for field in required_fields:
              if field not in data:
                  print(f'❌ Missing required field: {field}')
                  exit(1)
          print('✅ DFA JSON schema validation passed')
          "

      - name: Upload DFA artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dfa-export
          path: artifact/dfa/
          retention-days: 30

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const botComment = comments.find(comment => comment.user.type === 'Bot');

            const commentBody = `## DFA Export Validation ✅

            **Status**: All checks passed
            **DFA Export**: \`artifact/dfa/dfa.json\`
            **Hash**: \`${process.env.GITHUB_SHA}\`
            **Compilation Time**: < 180s ✅

            **Validation Results**:
            - ✅ DFA export generated successfully
            - ✅ SHA-256 hash verification passed
            - ✅ JSON schema validation passed
            - ✅ No unauthorized DFA changes detected

            The DFA export is ready for use in the runtime system.`;

            if (botComment) {
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
            }
