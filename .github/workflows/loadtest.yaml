name: Load Testing

on:
  schedule:
    # Run daily at 3 AM UTC
    - cron: "0 3 * * *"
  pull_request:
    paths:
      - "runtime/**"
  workflow_dispatch:

jobs:
  load-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build ledger image
        run: |
          cd runtime/ledger
          docker build -t provability-fabric/ledger:test .

      - name: Start ledger service with scale
        run: |
          cd runtime/ledger
          docker-compose up -d --scale ledger=3

          # Wait for services to be healthy
          echo "Waiting for ledger services to be ready..."
          timeout 120 bash -c 'until curl -f http://localhost:8080/health; do sleep 2; done'
          echo "‚úÖ Ledger services are ready"

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run k6 load test
        run: |
          cd tests/load
          k6 run --env LEDGER_URL=http://localhost:8080 ledger_load.js
        env:
          K6_OUT: json=results.json

      - name: Upload k6 results
        uses: actions/upload-artifact@v4
        with:
          name: k6-results-${{ github.run_id }}
          path: tests/load/results.json

      - name: Check performance thresholds
        run: |
          # Parse k6 results and check thresholds
          if [ -f "tests/load/results.json" ]; then
            echo "üìä Load test results:"
            cat tests/load/results.json | jq '.metrics'
            
            # Check if p95 latency is under 120ms
            P95_LATENCY=$(cat tests/load/results.json | jq -r '.metrics.http_req_duration.values.p(95)')
            echo "P95 latency: ${P95_LATENCY}ms"
            
            if (( $(echo "$P95_LATENCY > 120" | bc -l) )); then
              echo "‚ùå P95 latency ${P95_LATENCY}ms exceeds 120ms threshold"
              exit 1
            fi
            
            # Check error rate
            ERROR_RATE=$(cat tests/load/results.json | jq -r '.metrics.http_req_failed.rate')
            echo "Error rate: ${ERROR_RATE}"
            
            if (( $(echo "$ERROR_RATE > 0.001" | bc -l) )); then
              echo "‚ùå Error rate ${ERROR_RATE} exceeds 0.1% threshold"
              exit 1
            fi
            
            echo "‚úÖ All performance thresholds met"
          else
            echo "‚ùå No k6 results file found"
            exit 1
          fi

      - name: Cleanup
        if: always()
        run: |
          cd runtime/ledger
          docker-compose down -v

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let results = {};

            try {
              const resultsPath = 'tests/load/results.json';
              if (fs.existsSync(resultsPath)) {
                results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
              }
            } catch (error) {
              console.log('Could not read k6 results:', error.message);
            }

            const p95Latency = results.metrics?.http_req_duration?.values?.['p(95)'] || 'N/A';
            const errorRate = results.metrics?.http_req_failed?.rate || 'N/A';
            const totalRequests = results.metrics?.http_reqs?.count || 'N/A';

            const body = `## Load Test Results

            **Performance Metrics:**
            - P95 Latency: ${p95Latency}ms (target: <120ms)
            - Error Rate: ${errorRate} (target: <0.1%)
            - Total Requests: ${totalRequests}

            ${p95Latency < 120 && errorRate < 0.001 ? '‚úÖ All thresholds met' : '‚ùå Some thresholds exceeded'}

            _Generated by k6 load test_`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
